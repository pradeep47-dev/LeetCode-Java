Increasing Triplet Subsequence

Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Return true if there exists i, j, k  such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.

Example 1:

Input: [1,2,3,4,5]
Output: true

// 2 variables - max1 and max2


class Solution {
    public boolean increasingTriplet(int[] nums) {
        int val1 = Integer.MAX_VALUE;
        int val2 = Integer.MAX_VALUE;
        
        for(int n : nums) {
            if(n <= val1) val1 = n;
            else if(n <= val2) val2 = n;
            else return true;
        }
        return false;        
    }
}	

O(n) time complexity and O(1) space complexity.



132 Pattern

Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise return false.
 
Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.

Example 3:

Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].


// create a Min array - min values of ajacent elements
// compare from last index ->  k > j > i

	public boolean find132pattern(int[] nums) {
      int n = nums.length;
        if (n < 3)
            return false;
			
        int[] min = new int[n];
        min[0] = nums[0];
        for (int i = 1; i < n; i++)
            min[i] = Math.min(min[i - 1], nums[i]);
        
        for (int i = n - 1, j = n; i >= 0; i--) {
            if (nums[i] > min[i]) {
                while (j < n && nums[j] <= min[i])
                    j++;
                if (j < n && nums[j] < nums[i])
                    return true;
                nums[--j] = nums[i];
            }
        }
        return false;
    }