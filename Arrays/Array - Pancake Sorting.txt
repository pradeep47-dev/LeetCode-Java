Pancake Sorting

Given an array, we can perform a pancake flip: We choose positive integer k <= A.length, reverse in K groups 
We want to perform zero or more pancake flips to sort the array A.

Return the k-values corresponding to a sequence of pancake flips that sort A. 

Example 1:

Input: [3,2,4,1]
Output: [4,2,4,3]
Explanation: 
We perform 4 pancake flips, with k values 4, 2, 4, and 3.
Starting state: A = [3, 2, 4, 1]
After 1st flip (k=4): A = [1, 4, 2, 3]
After 2nd flip (k=2): A = [4, 1, 2, 3]
After 3rd flip (k=4): A = [3, 2, 1, 4]
After 4th flip (k=3): A = [1, 2, 3, 4], which is sorted. 



// Get the index of largest number in array
// reverse the elements upto index and reverse upto n-1
// repeat above steps n times

    public List<Integer> pancakeSort(int[] A) {
        List<Integer> result = new ArrayList<>();
        int n = A.length, largest = n;
		
        for (int i = 0; i < n; i++) {
            int index = find(A, largest);
            reverse(A, index);
            reverse(A, largest - 1);
            result.add(index + 1);
            result.add(largest--);
        }
        return result;
    }
    
    private int find(int[] A, int target) {
        for (int i = 0; i < A.length; i++) {
            if (A[i] == target) {
                return i;
            }
        }
        return -1;
    }
    
    private void reverse(int[] A, int index) {
        int i = 0, j = index;
        while (i < j) {
            int temp = A[i];
            A[i] = A[j];
            A[j] = temp;
            
            i++;
            j--;
        }
    }
