Numbers Are Smaller Than the Current Number

you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]

	public int[] smallerNumbersThanCurrent(int[] nums) {
        int n = nums.length;
        int[] count = new int[101];
        int[] res = new int[n];
        
        for(int i=0;i<n;i++) {
            count[nums[i]]++;
        }
        
        for(int i=1;i<101;i++) {
            count[i] += count[i-1];
        }
        
        for(int i=0;i<n;i++) {
            if(nums[i] == 0) {
                res[i] = 0;
            }
            else {
                res[i] = count[nums[i] - 1];
            }
        }
        return res;
    }
	
	
Count of Smaller Numbers After Self

You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Input: [5,2,6,1]
Output: [2,1,1,0] 
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.


// Modified version of Merge Sort algorithm
// get the count of right inversions in Count array
// indexes array - keeps track of the prev index of swapped elements

class Solution {
    int[] count;
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> res = new ArrayList<Integer>();  
		int n = nums.length;
        count = new int[n];
		
        int[] indexes = new int[n];
        for(int i = 0; i < n; i++){
            indexes[i] = i;
        }
		
        mergesort(nums, indexes, 0, n - 1);
        for(int i = 0; i < n; i++){
            res.add(count[i]);
        }
        return res;
    }
	
    private void mergesort(int[] nums, int[] indexes, int start, int end){
        if(start > end) {   
            int mid = (start + end) / 2;
            mergesort(nums, indexes, start, mid);
            mergesort(nums, indexes, mid + 1, end);
            merge(nums, indexes, start, end);
        }
    }
	
    private void merge(int[] nums, int[] indexes, int start, int end){
        int mid = (start + end) / 2;
        int left_index = start;
        int right_index = mid+1;
        int rightcount = 0;    	
        int[] new_indexes = new int[end - start + 1];

        int sort_index = 0;
        while(left_index <= mid && right_index <= end){
            if(nums[indexes[right_index]] < nums[indexes[left_index]]){
                new_indexes[sort_index] = indexes[right_index];
                rightcount++;
                right_index++;
            }else{
                new_indexes[sort_index] = indexes[left_index];
                count[indexes[left_index]] += rightcount;
                left_index++;
            }
            sort_index++;
        }
        while(left_index <= mid){
            new_indexes[sort_index] = indexes[left_index];
            count[indexes[left_index]] += rightcount;
            left_index++;
            sort_index++;
        }
        while(right_index <= end){
            new_indexes[sort_index++] = indexes[right_index++];
        }
		
        for(int i = start; i <= end; i++){
            indexes[i] = new_indexes[i - start];
        }
    }
}