/// Combinations Sum of array - without duplicates

Given a set of candidate numbers (without duplicates) and a target number (target), find all unique combinations 
in candidates where the candidate numbers sums to target.

Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]


	public List<List<Integer>> combinationSum(int[] arr, int target) {
        List<List<Integer>> result = new ArrayList<>();
        dfs(result, new ArrayList<>(), arr, arr.length, target, 0);
        return result;
    }
    
    public void dfs(List<List<Integer>> result, List<Integer> subset, int[] arr, int n, int target, int idx) {
        if(target < 0) return;
        if(target == 0) {
            result.add(new ArrayList<>(subset));
            return;
        }
        
        for(int i=idx; i<n; i++) {
            if(arr[i] == target) {
                subset.add(arr[i]);
                result.add(new ArrayList<>(subset));
                subset.remove(subset.size() - 1);
            }
            else if(arr[i] <  target) {
                subset.add(arr[i]);
                dfs(result, subset, arr, n, target - arr[i], i);
                subset.remove(subset.size() - 1);
            }
        }
    }


/// Combinations Sum of array - Duplicates - Use number only once

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]


	public List<List<Integer>> combinationSum2(int[] arr, int target) {
        Arrays.sort(arr);
        List<List<Integer>> result = new ArrayList<>();
        dfs(result, new ArrayList<>(), arr, arr.length, target, 0);
        return result;
    }
    
    public void dfs(List<List<Integer>> result, List<Integer> subset, int[] arr, int n, int target, int idx) {
        if(target < 0) return;
        if(target == 0) {
            result.add(new ArrayList<>(subset));
            return;
        }
        
        for(int i=idx; i<n; i++) {
            if(i > idx && arr[i] == arr[i-1]) continue;
            if(arr[i] == target) {
                subset.add(arr[i]);
                result.add(new ArrayList<>(subset));
                subset.remove(subset.size() - 1);
            }
            else if(arr[i] <  target) {
                subset.add(arr[i]);
                dfs(result, subset, arr, n, target - arr[i], i+1);
                subset.remove(subset.size() - 1);
            }
        }
    }
    
	

Combination Sum III

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers. The solution set must not contain duplicate combinations.


Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]

Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]



	public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<>();
        dfs(result, new ArrayList<>(), n, k, 1);
        return result;
    }
    
    public void dfs(List<List<Integer>> result, List<Integer> subset, int n, int k, int idx) {
        if(subset.size() > k) return;
        if(n == 0 && subset.size() == k) {
            result.add(new ArrayList<>(subset));
            return;
        }
        
        for(int i=idx;i<=9;i++) {
            subset.add(i);
            dfs(result, subset, n-i, k, i+1);
            subset.remove(subset.size() - 1);
        }        
    }
	
	
Combination Sum IV

Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.

Example:

nums = [1, 2, 3]
target = 4

The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

Note that different sequences are counted as different combinations.

Therefore the output is 7.

/// Iteration

	public int combinationSum4(int[] nums, int target) {
        int[] dp = new int[target+1];
        dp[0] = 1;
        
        for(int i=1;i<=target;i++) {
            for(int j=0;j<nums.length;j++) {
                if(i - nums[j] >= 0) {
                    dp[i] += dp[i - nums[j]];
                }
            }
        }
        return dp[target];
    }

/// Recursion

	public Dictionary<int,int> Map = new Dictionary<int,int>();
    
    public int CombinationSum4(int[] nums, int target) {
       
        if(Map.ContainsKey(target)) return Map[target];
        
        if(target == 0) return 1;    
        
        int result =0;
        for(int i=0;i<nums.Length;i++)
        {
            if(target >= nums[i])
            {
                result += CombinationSum4(nums, target - nums[i]);
            }
        }
        Map[target] = result;
        return result;
    }
	

///Factor Combinations

Numbers can be regarded as product of its factors. For example,

Input: 12
Output:
[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]

	public List<List<int>> GetFactors(int n) {
        List<List<int>> result = new List<List<int>>();
        Factors(result, new ArrayList<>(), n, 2);
        return result;
    }
    
    public void Factors(List<List<int>> result, List<int> subset, int n, int index)
    {
        if(n<=0)
            return;
        
        if(n==1)
        {
            if(subset.size() > 1)
            result.add(new ArrayList<>(subset));
            return;
        }
        
        for(int i=index;i<=Math.Sqrt(n);i++)
        {
            if(n%i==0)
            {
                subset.add(i);    
                Factors(result,subset,n/i,i);
                subset.remove(subset.size() -1);
            }            
        }
    }


/// Combinations of k elements of N

Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

   public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        helper(result, new ArrayList<>(), n, k, 1);
        return result;
    }
    
    public void helper(List<List<Integer>> result, List<Integer> subset, int n, int k, int idx) {
        if(k < 0) return;
        if(k == 0) {
            result.add(new ArrayList<>(subset));
            return;
        }
        
        for(int i=idx;i<=n;i++) {
            subset.add(i);
            helper(result, subset, n, k-1, i+1);
            subset.remove(subset.size() - 1);
        }
    }
