Permuations

Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

 public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, result, new ArrayList<>());
        return result;
    }
    
    public void backtrack(int[] nums, List<List<Integer>> result, List<Integer> subset) {
        if(subset.size() == nums.length) {
            result.add(new ArrayList<Integer>(subset));
        }
        else {
            for(int i=0;i<nums.length;i++) {
                if(subset.contains(nums[i])) continue;
                subset.add(nums[i]);
                backtrack(nums, result, subset);
                subset.remove(subset.size() -1);
            }
        }
    }



// Permuations duplicate

Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]


	public IList<IList<int>> PermuteUnique(int[] nums) {
        Array.Sort(nums);
		List<List<Integer>> result = new ArrayList<>();
        DFS(result, new List<int>(), nums, new boolean[nums.Length]);
        return result;
    }
    
    public void DFS(IList<IList<int>> result, List<int> subset, int[] nums, bool[] visited)
    {
        if(subset.size() == nums.Length){
            result.add(new ArrayList<int>(subset));
        }
        else{
            for(int i=0;i<nums.Length;i++)
            {
                if(visited[i] || i > 0 && nums[i] == nums[i-1] && !visited[i - 1]) continue;
                visited[i] = true;
                subset.add(nums[i]);
                DFS(result, subset, nums,visited);
                visited[i] =false;
                subset.remove(subset.Count() - 1);
            }
        }            
            
    }
	
	
Next Permutation


Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

	public void NextPermutation(int[] nums) {        
        int n = nums.length;        
        int i = n-2;        
        while(i>=0 && nums[i+1] <= nums[i])
        {
            i--;
        }
        
        if(i>=0)
        {
            int j = n-1;            
            while(j>=0 && nums[j] <= nums[i])
            {
                j--;
            }
            swap(nums, i, j);
        }       
        Reverse(nums, i+1);
    }
    
    public void Reverse(int[] arr, int start)
    {
        int i = start, j = arr.length - 1;        
        while(i<j)
        {
            swap(arr, i, j);
            i++; j--;
        }
    }
    
    public void swap(int[] arr, int i, int j)
    {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }