Partition array with Pivot

Given a pivot x, and a list lst, partition the list into three parts.

The first part contains all elements in lst that are less than x
The second part contains all elements in lst that are equal to x
The third part contains all elements in lst that are larger than x
Ordering within a part can be arbitrary.

For example, given x = 10 and lst = [9, 12, 3, 5, 14, 10, 10], one partition may be [9, 3, 5, 10, 10, 12, 14].


	public int[] pivot_array(int[] arr, int pivot) {
		if(arr == null || arr.length == 0) return arr;
		int n = arr.length;
		
		int mid = SwapWithPivot(arr, 0, n - 1, pivot);
		SwapWithPivot(arr, mid, n - 1, pivot + 1);

		return arr;
	}

	public int SwapWithPivot(int arr, int start, int end, int x) {			

		while (start < end) {
			if (arr[start] >= x and arr[end] < x)
				swap_indices(arr, start, end)
			else {
				if arr[start] < x:
					start++;
				if arr[end] >= x:
					end--;
			}
		}
	
		return (arr[start] < x && start + 1 < arr.length) ? start + 1 : start;		
	}
	
	public void swap_indices(int[] arr, int i, int j) {
		int tmp = arr[i];
		arr[i] = arr[j];
		arr[j] = tmp;
	}


