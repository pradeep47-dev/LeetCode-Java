Search in Rotated Sorted Array

sorted array is rotated at some pivot unknown to you beforehand.
([0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

									// Binary Search
									
										public int search(int[] nums, int target) {
											int start = 0, end = nums.length - 1;
											
											while(start <= end) {
												int mid = end - (end-start) / 2;
												
												if(nums[mid] == target) return mid;
											
												// if array contains duplicates	
												if(nums[start] == nums[mid]) {	
													start++;
													continue;
												}
												
												if(nums[start] < nums[mid]) {
													if(target < nums[start] || target > nums[mid]) {
														start = mid + 1;
													}
													else
														end = mid - 1;
												}
												else {
													if(target < nums[mid] || target > nums[end]) {
														end = mid -1;
													}
													else
														start = mid + 1;
												}
											}
											return -1;
										}
	
	
	
Find Minimum in Rotated Sorted Array 

Example 1:

Input: [3,4,5,1,2] 
Output: 1

Example 2:

Input: [4,5,6,7,0,1,2]
Output: 0

											// Binary Search - No Duplicates
											
												public int findMin(int[] nums) {
													int start = 0, end = nums.length - 1;
													if(end == 0) return nums[0];
													if(nums[end] > nums[start])
														return nums[start];
													
													while(start <= end) {
														int mid = start + (end -start) / 2;
														
														if(nums[mid+1] < nums[mid]) return nums[mid+1];
														if(nums[mid] < nums[mid-1]) return nums[mid];
														
														if(nums[mid] > nums[0])
															start = mid + 1;
														else
															end = mid - 1;
													}
													return nums[0];
												}
												
												
											/// With duplicates
											
											Input: [2,2,2,0,1]
											Output: 0
											
												public int findMin(int[] nums) {
													int start = 0, end = nums.length-1;
													if(end == 0) return nums[0];
													if(nums[end] > nums[start])
														return nums[start];
													
													while(start <= end) {
														int mid = start + (end-start) / 2;  
														
														if(nums[mid] > nums[end])
															start = mid + 1;
														else if(nums[mid] < nums[end])
															end = mid;
														else 
															end--;
													}
													return nums[start];
												}