Continuous Subarray Sum

Given a list of non-negative numbers and a target integer k, write a function to check if the array 
has a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is also an integer.

Example 2:

Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.


// HashMap to store the continuous sum % k (get the multiples of k)
	
	public bool CheckSubarraySum(int[] nums, int k) {
        
        Map<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        map.put(0, -1);
        
        for(int i=0;i<nums.length;i++) {
            sum += nums[i];
            
            if(k!=0) sum = sum % k;
            
            if(map.containsKey(sum)) {
                if(i - map.get(sum) > 1)
                    return true;
            }
            else
                map.put(sum, i);
        }
        return false;
    }
	


Subarray Sum Equals K

Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:

Input:nums = [1,1,1], k = 2
Output: 2

// HashMap to store continuous sum frequency 

	public int SubarraySum(int[] nums, int k) {
       Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        int sum = 0, count = 0;
        for(int i=0; i<nums.length; i++) {
            sum += nums[i];
            
            if(map.containsKey(sum-k))
                count += map.get(sum-k);
            
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
	

/// O(1) solution - iterate all possibilities

	public int subarraySum(int[] nums, int k) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            int sum=0;
            for (int j = i; j < nums.length; j++) {
                sum+=nums[j];
                if (sum == k)
                    count++;
            }
        }
        return count;
    }