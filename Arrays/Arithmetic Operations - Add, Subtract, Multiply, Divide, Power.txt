
"&" AND operation, for example, 2 (0010) & 7 (0111) => 2 (0010)

"^" XOR operation, for example, 2 (0010) ^ 7 (0111) => 5 (0101)

"~" NOT operation, for example, ~2(0010) => -3 (1101) It's called two's complement.

1111 is -1, in two's complement

1110 is -2, which is ~2 + 1, ~0010 => 1101, 1101 + 1 = 1110 => 2

1101 is -3, which is ~3 + 1

so if you want to get a negative number, you can simply do ~x + 1


// Add
		public static int Add(int x, int y)
        {           
            while (y != 0)
            {              
                int carry = x & y;  
				
                x = x ^ y;
               
                y = carry << 1;
            }
            return x;
        }

	// Recursive
		public int getSum(int a, int b) {
			return (b == 0) ? a : getSum(a ^ b, (a & b) << 1);
		}
		
		
// Subtract
	public int getSubtract(int a, int b) {
		while (b != 0) {
			int borrow = (~a) & b;
			a = a ^ b;
			b = borrow << 1;
		}
		
		return a;
	}
	
	// Recursive
		public int getSubtract(int a, int b) {
			return (b == 0) ? a : getSubtract(a ^ b, (~a & b) << 1);
		}


// Multiply		
		public static int multiply(int x, int y)
        {           
			int result = Math.round(y/(1/x));
			
			(or)
			
            var num = x;
			
			for(var i = 1; i < y; i++)
					num += x; 
					
			return num;            
        }	

// Divide
		public static int divide(int x, int y)
        {           
			bool negative = (x < 0) ^ (y < 0);       
         
			x = Math.Abs(x); 
			y = Math.Abs(y);       
      
			int quotient = 0; 
          
			while (x >= y) 
			{ 
				x = x - y; 
				quotient++; 
			} 
      
			return negative ? -quotient : quotient;             
        }	


// negative number

		public int negate(int x) {
			return ~x + 1;
		}

// Pow(x, n)

Implement pow(x, n), which calculates x raised to the power n (xn).

Example 1:

Input: 2.00000, 10
Output: 1024.00000

	public double MyPow(double x, int n) 
	{  
		long N = (long) n;
        if(N < 0) {
            N = -N;
            x = 1/x;
        }
        
        double result = 1, product = x;
        for(long i=N;i>0;i=i/2) {          
            if(i%2 == 1)
                result = result * product;
            
            product = product * product;           
        }
        return result;
    }

//	 Sqrt(x)


Implement int sqrt(int x).

Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

	public int mySqrt(int x) {
        int start = 1, end  = x;
        int res = 0;
        
        while(start <= end) {
            int mid = start + (end -start) / 2;
            if(mid <= (x / mid)) {
                start = mid + 1;
                res = mid;
            }
            else
                end = mid - 1;
        }
        return res;
    }
	
	
// Multiply Strings

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"


// Dynammic Programming

    public String multiply(String num1, String num2) {
        int m = num1.Length, n = num2.Length;
        int[] dp = new int[m+n];
        
        for(int i=m-1;i>=0;i--)
        {
            for(int j=n-1;j>=0;j--)
            {
                int val = (num1[i] - '0') * (num2[j] - '0');
                int p1 = i+j, p2 = i+j+1;
                
                int sum = val + dp[p2];
                dp[p1] += sum / 10;
                dp[p2] = sum % 10;
            }
        }
        
        StringBuilder sb = new StringBuilder();        
        for(int p : dp)
        {
            if(sb.length() != 0 && p != 0)
                sb.append(p);
        }
        return sb.length == 0 ? "0" : sb.ToString();
    }


