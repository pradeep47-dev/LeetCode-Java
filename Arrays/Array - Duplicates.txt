Find the Duplicate Number

Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), 
Assume that there is only one duplicate number, find the duplicate one.

Example 1:

Input: [1,3,4,2,2]
Output: 2

Example 2:

Input: [3,1,3,4,2]
Output: 3


// find the number

	public int FindDuplicate(int[] nums) {
        int n = nums.length;
		int sum = (n * (n - 1)) / 2;
		int total = 0;
		
        for(int i = 0 ; i < nums.Length; i++) {           
            total += nums[i];
        }      
        
        return total - sum;
    }

// another method

	public int FindDuplicate(int[] nums) {
        
        for(int i = 0 ; i < nums.Length; i++) {
           
            int index = Math.abs(nums[i]) - 1; 
            
            if(nums[index] < 0) 
                return index + 1;
            else 
                nums[index] = -nums[index];
        }      
        
        return 0;
    }
	

	
Contains Duplicate - j-i = k && nums[i] == nums[j]

Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array 
such that nums[i] = nums[j] and the absolute difference between i and j is at most k.

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true


	public boolean containsNearbyDuplicate(int[] nums, int k) {
        if(nums == null || nums.length < 2 || k<=0 || k >= 35000) return false;
        int i = 0, j=0, n = nums.length;
        
        while(i < n-1) {
            if(i!=j && nums[i] == nums[j])
                return true;
            else {
				if((j-i == k) || j == n-1) {
					i++;
					j = i+1;
				}
				else
					j++;
			}
        }
        
        return false;
    }
	
Contains Duplicate III - I and J diff is t and values is K

Given an array of integers, find out whether there are two distinct indices i and j in the array such that the 
absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.

Example 1:

Input: nums = [1,2,3,1], k = 3, t = 0
Output: true


	public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
		if(k < 1 || t < 0) return false;
		int n = nums.length;
        if(n > 9999) return false;
        
        for(int i=0;i<n;i++) {
            for(int j=i+1;j<=i+k && j<n;j++) {
                if(i==j) continue;
                
                if(Math.abs((long) nums[i] - (long) nums[j]) <= t)
                    return true;
            }
        }
        
        return false;
    }