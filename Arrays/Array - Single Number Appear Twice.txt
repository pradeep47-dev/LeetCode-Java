Single Number - appear twice

Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Example 1:

Input: [2,2,1]
Output: 1

																	public int singleNumber(int[] nums) {
																		int sum = 0;
																		for(int i : nums)
																			sum ^= i;
																		
																		return sum;
																	}
	
	
Single Number - appear three times

Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.

Example 1:

Input: [2,2,3,2]
Output: 3

Example 2:

Input: [0,1,0,1,0,1,99]
Output: 99

																public int singleNumber(int[] nums) {        
																	int seenOnce=0,seenTwice=0;
																	for(int n: nums) {
																		seenOnce = ~seenTwice & (seenOnce^n);
																		seenTwice = ~seenOnce &(seenTwice^n);
																		
																	}
																	return seenOnce;
																}
	

Single Number - Find two numbers appear once

Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

Example:

Input:  [1,2,1,3,2,5]
Output: [3,5]

														public int[] singleNumber(int[] nums) {
															
															// Get the XOR of the two numbers we need to find
															int diff = 0;
															for (int num : nums) {
																diff ^= num;
															}
															// Get its last set bit
															diff &= -diff;
															
															// Pass 2 :
															int[] rets = {0, 0}; 
															// this array stores the two numbers we will return
															
															for (int num : nums)
															{
																if ((num & diff) == 0) // the bit is not set
																{
																	rets[0] ^= num;
																}
																else // the bit is set
																{
																	rets[1] ^= num;
																}
															}
															return rets;
														}
