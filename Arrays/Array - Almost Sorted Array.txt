
Search in an almost sorted array

(+1 / -1)

Given an array which is sorted, but after sorting some elements are moved to either of the adjacent positions, i.e., arr[i] may be present at arr[i+1] or arr[i-1]. Write an efficient function to search an element in this array. Basically the element arr[i] can only be swapped with either arr[i+1] or arr[i-1].

For example consider the array {2, 3, 10, 4, 40}, 4 is moved to next position and 10 is moved to previous position.

Example :

Input: arr[] =  {10, 3, 40, 20, 50, 80, 70}, key = 40
Output: 2 
Output is index of 40 in given array

			
		
//  binary search based function. 
   
    public int binarySearch(int[] arr, int start, int end, int x) 
    { 
        while (start < end) 
        { 
            int mid = start + (end - start) / 2;   
           
            if (arr[mid] == x)  
                return mid; 
            if (mid > start && arr[mid - 1] == x)  // check adjacent elements
                return (mid - 1); 
            if (mid < end && arr[mid + 1] == x)  // check adjacent elements
                return (mid + 1);   
          
            if (arr[mid] < x)  
                start = mid + 2;
			else 
				end = mid - 2;
        }   
      
        return -1; 
    } 