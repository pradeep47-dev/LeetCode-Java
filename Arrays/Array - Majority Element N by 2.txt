Majority Element

Given an array of size n, find the majority element. 

The majority element is the element that appears more than n/2 times.

Example 1:

Input: [3,2,3]
Output: 3

Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

// Boyer-Moore Voting Algorithm

 * counting instances of the majority element as +1+1+1  
 * And instances of any other element as −1-1−1
 * summing them would be the majority element


	public int majorityElement(int[] nums) {
        int count = 0;
        Integer temp = null;
        
        for(int i : nums) {
            if(count == 0) {
                temp = i;
            }
            count += (i == temp) ? 1 : -1;
        }
                   
        return temp;
    }
	


Majority Element II


Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]

Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]


	public List<Integer> majorityElement(int[] nums) {
        List<Integer> result = new ArrayList<>();
        if(nums == null || nums.length == 0)
            return result;
        
        int cand1 = 0, cand2 = 0;        
        int count1 = 0, count2 = 0;
        
        for(int num : nums){
            if(num == cand1){
                count1 ++;
                continue;
            }
            
            if(num == cand2){
                count2 ++;
                continue;
            }
            
            if(count1 == 0){
                cand1 = num;
                count1 = 1;
                continue;
            }
            
            if(count2 == 0){
                cand2 = num;
                count2 = 1;
                continue;
            }
            
            count1 --;
            count2 --;
            
        }
        
        count1 = 0;
        count2 = 0;
        
        for(int num : nums){
            if(num == cand1){
                count1 ++;
            }else if(num == cand2){
                count2 ++;
            }
        }
        
        if(count1 > nums.length / 3)
            result.add(cand1);
        
        if(count2 > nums.length / 3)
            result.add(cand2);
        
        return result;
    }

