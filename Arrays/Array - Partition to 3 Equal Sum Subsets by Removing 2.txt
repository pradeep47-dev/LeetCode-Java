Load Balancer - Split to 3 equal sums

Given an array containing only positive integers, return if you can pick two integers from the array which cuts the array 
into three pieces such that the sum of elements in all pieces is equal.
 
Example 1:

Input:  array = [2, 4, 5, 3, 3, 9, 2, 2, 2]
Output: true
Explanation: choosing the number 5 and 9 results in three pieces [2, 4], [3, 3] and [2, 2, 2]. Sum = 6.
 
Example 2:

Input:  array =[1, 1, 1, 1],
Output: false


// split by removing two numbers
// Using two Pointer technique

	public boolean solution(int[] A) {  
		 int n = A.length;	
		int[] prefix = new int[n];
		prefix[0] = A[0];
        
		for(int i = 1; i < n; i ++)
			prefix[i] = prefix[i-1] +  A[i];
		
        int i = 1;
		int j = n - 2;
		int start, mid, end;
		
		
		while(i < j) {
		
			start = prefix[i] - A[i];
			mid = prefix[j] - prefix[i] - A[j];
			end = prefix[n - 1] - prefix[j];
		
			if(start == mid && mid == end)
				return true;
		
			if (start < end)
				i++;
			else if (start > end)
				j--;
			else{                   // Else condition denotes: start == end
				i++;
				j--;
			}
		}
		return false; // If no solution is found then returning false
	}