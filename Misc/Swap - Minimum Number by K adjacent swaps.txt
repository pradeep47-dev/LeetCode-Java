Minimum number after swap adjacent array elements by k times

We have an integer array of n elements from 1-9. We can swap any two adjacent elements k times, return the minimum value we can obtain. 

Input: [3,1,4,2], k = 1

Result:
k = 1:   [1,3,4,2]
k = 2:   [1,3,2,4]
k = 3:   [1,2,3,4]

// Find the min element index in next K elements of each index i
// swap from i to minIndex

N * K - Solution

    public static void main(String[] args) {        
        int arr[] = { 3,1,4,2 }; 
        int length = arr.length; 
        int k = 3; 
        minimizeArray(arr, length, k);        
    }    	
	
	public void minimizeArray(int[] arr, int n, int k) 
	{    
		if (k <= 0) 
			return;  
	
		for (int i = 0; i < n; i++)  
		{ 
			int min_index = 0, min = Integer.MAX_VALUE; 	
				
			// Find index of the minimum element in next K elements 
			for (int j = i; j <= i+k && j < n; j++)  
			{ 
				if (arr[j] < min)  
				{ 
					min = arr[j]; 
					min_index = j; 
				} 
			} 
	
			// Update the array elements by swapping adjacent elements 
			swapMin(arr, i, min_index); 
			
			// Update the value of number of swaps 
			k = k - (min_index - i); 
	
			if (k <= 0) 
				break; 
		} 
	}
	
	
	public static void swapMin(int[] arr, int target_pos, int curr_pos) 
	{ 		
		for (int i = curr_pos; i > target_pos; i--)  
		{ 
			int temp = arr[i - 1]; 
			arr[i - 1] = arr[i]; 
			arr[i] = temp; 
		} 
	} 