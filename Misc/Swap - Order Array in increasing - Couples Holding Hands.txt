Couples Holding Hands

N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.

The people and seats are represented by an integer from 0 to 2N-1, the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).

The couples' initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat.

Example 1:

Input: row = [0, 2, 1, 3]
Output: 1
Explanation: We only need to swap the second (row[1]) and third (row[2]) person.


The key idea is: no matter which number you swap in a pair, it doesn't matter. It's easy to prove: 
if a swap will results in 2 pairs, 0321, it doesn't matter you swap 0 or 3. As it's N pairs and not a round table, 
2N & 2N+1 must form a pair.
So we decide always swap the first number, that's the reason it goes by i+=2. Using a map to form reverse index and 
maintain it, it's the solution.

class Solution {
    public int minSwapsCouples(int[] row) {
        int len = row.length;
        int[] map = new int[len];
        
        // reverse indexing the each ppl's seat 
        for (int i = 0; i < len; i++){
            map[row[i]] = i;
        }
        
        int count = 0;
        // swap each ppl to the correct seating 
        for (int i = 0; i < len; i+=2){
            // for each couple, swap the first one's seating 
            int toSwap = row[i+1] % 2 == 0 ? row[i+1] + 1 : row[i+1] - 1;
            if (row[i] != toSwap){
                count++;
                swap(i, map[toSwap], map, row);
            }
        }
        return count;
    }
    
    public void swap(int i, int j, int[] map, int[] row){
        int temp = row[i];
        row[i] = row[j];
        row[j] = temp;
        // update the map the correct index
        map[row[i]] = i;
        map[row[j]] = j;
    }
}
