Search Autocomplete System

Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character '#'). For each character they type except '#', you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:

    The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.
    The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first).
    If less than 3 hot sentences exist, then just return as many as you can.
    When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.

Your job is to implement the following functions:

The constructor function:

AutocompleteSystem(String[] sentences, int[] times): This is the constructor. The input is historical data. Sentences is a string array consists of previously typed sentences. Times is the corresponding times a sentence has been typed. Your system should record these historical data.

Now, the user wants to input a new sentence. The following function will provide the next character the user types:

List<String> input(char c): The input c is the next character typed by the user. The character will only be lower-case letters ('a' to 'z'), blank space (' ') or a special character ('#'). Also, the previously typed sentence should be recorded in your system. The output will be the top 3 historical hot sentences that have prefix the same as the part of sentence already typed.
 

Example:
Operation: AutocompleteSystem(["i love you", "island","ironman", "i love leetcode"], [5,3,2,2])
The system have already tracked down the following sentences and their corresponding times:
"i love you" : 5 times
"island" : 3 times
"ironman" : 2 times
"i love leetcode" : 2 times
Now, the user begins another search:

Operation: input('i')
Output: ["i love you", "island","i love leetcode"]
Explanation:
There are four sentences that have prefix "i". Among them, "ironman" and "i love leetcode" have same hot degree. Since ' ' has ASCII code 32 and 'r' has ASCII code 114, "i love leetcode" should be in front of "ironman". Also we only need to output top 3 hot sentences, so "ironman" will be ignored.

Operation: input(' ')
Output: ["i love you","i love leetcode"]
Explanation:
There are only two sentences that have prefix "i ".

Operation: input('a')
Output: []
Explanation:
There are no sentences that have prefix "i a".


public class AutocompleteSystem {    
  
    private class TrieNode {
        public List<String> mostFrequentSents = new ArrayList<String>();

        public TrieNode[] children = new TrieNode[27];
    }        
    
    private TrieNode root;
    private Map<String, int> map;
    private TrieNode curNode;
    private StringBuilder sb;
    
    public AutocompleteSystem(String[] sentences, int[] times) {
        
        root = new TrieNode();
        curNode = root;
        sb = new StringBuilder();
        map = new HashMap<String, int>();

        for (int i = 0; i < sentences.length; i++)
        {
            String sentence = sentences[i];
            int curTimes = times[i];            
            map.put(sentence, curTimes);
            AddSentence(sentence);
        }
    }
    
	public void AddSentence(string sent) {
        
        TrieNode node = root;
        fore (char ch in sent.toCharArray())
        {
            int charIndex = ch == ' ' ? 26 : ch - 'a';
            if (node.children[charIndex] == null)
            {
                node.children[charIndex] = new TrieNode();
            }

            node = node.children[charIndex];
            OrderFrequentSentences(node, sent);
        }
    }
	
	private void OrderFrequentSentences(TrieNode node, String sentence)
    {
        if (!node.mostFrequentSents.contains(sentence))
        {
            node.mostFrequentSents.add(sentence);
        }

        Collections.sort(node.mostFrequentSents, (a, b) -> map.get(a) == map.get(b) ? a.compareTo(b) : map.get(b) - map.get(a));

        if (node.mostFrequentSents.size() > 3)
        {
            node.mostFrequentSents.remove(3);
        }
    }
    
    public List<string> Input(char c) { /// Main method to return search results
        
        if (c == '#')
        {
            string sent = sb.ToString();
			map.put(sent, map.getOrDefault(sent, 0) + 1);
            AddSentence(sent);
            curNode = root;
            sb = new StringBuilder();
            return new List<string>();
        }
        else
        {
            sb.Append(c);
            int charIndex = c == ' ' ? 26 : c - 'a';

            if (curNode == null || curNode.children[charIndex] == null)
            {
                curNode = null;
                return new List<string>();
            }

            curNode = curNode.children[charIndex];
            return curNode.mostFrequentSents;
        }
    }
}
