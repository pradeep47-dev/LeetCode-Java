Minimum Possible Integer After at Most K Adjacent Swaps On Digits

Given a string num representing the digits of a very large integer and an integer k.

You are allowed to swap any two adjacent digits of the integer at most k times.

Return the minimum integer you can obtain also as a string.
 
Example 1:

Input: num = "4321", k = 4
Output: "1342"
Explanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.

Example 2:

Input: num = "100", k = 1
Output: "010"
Explanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.

Example 3:

Input: num = "36789", k = 1000
Output: "36789"
Explanation: We can keep the number without any swaps.

Example 4:

Input: num = "22", k = 22
Output: "22"

Example 5:

Input: num = "9438957234785635408", k = 23
Output: "0345989723478563548"


class Solution {
    int[] bit;
    int n;
	
    public String minInteger(String num, int k) {
        n = num.length();
        bit = new int[n + 1];
        boolean[] visited = new boolean[n];
        Queue<Integer>[] queues = new LinkedList[10];
        for (int i = 0; i < 10; i++) {
            queues[i] = new LinkedList<>();
        }
		
        for (int i = 0; i < n; i++) {           
            queues[num.charAt(i) - '0'].offer(i);
        }
        StringBuilder sb = new StringBuilder();
		
        while (sb.length() < n && k > 0) {
            for (int i = 0; i < 10; i++) {
                if (queues[i].size() == 0) {
                    continue;
                }
                int curt = queues[i].peek();
                int cost = curt - pSum(curt - 1);
                if (cost > k) {
                    continue;
                }
                queues[i].poll();
                k -= cost;                
                sb.append((char) (i + '0'));
                update(curt);
                visited[curt] = true;                
                break;
            }
        }
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                sb.append(num.charAt(i));
            }
        }
        return sb.toString();
    }
    
    private void update(int i) {
        for (int j = i + 1; j < n + 1; j += j & -j) {
            bit[j]++;
        }
    }
    
    private int pSum(int i) {
        int result = 0;
        for (int j = i + 1; j > 0; j -= j & -j) {
            result += bit[j];
        }
        return result;
    }
}