You are given an unordered array consisting of consecutive integers

[1, 2, 3, ..., n] without any duplicates. You are allowed to swap any two elements. You need to find the minimum number of swaps required to sort the array
in ascending order.

Input 7, 1, 3, 2, 4, 5, 6
Output 5

i   arr                         swap (indices)
0   [7, 1, 3, 2, 4, 5, 6]   swap (0,3)
1   [2, 1, 3, 7, 4, 5, 6]   swap (0,1)
2   [1, 2, 3, 7, 4, 5, 6]   swap (3,4)
3   [1, 2, 3, 4, 7, 5, 6]   swap (4,5)
4   [1, 2, 3, 4, 5, 7, 6]   swap (5,6)
5   [1, 2, 3, 4, 5, 6, 7]

// Iterate through the array and visit each index of array value, if not visited add count

    public int minimumSwaps(int[] arr) 
	{
		int n = arr.length;
		int swaps = 0;

		if(n==0) return swaps;
		boolean visited[] = new boolean[n];

		for(int i=0;i<n;i++)
		{
			int j=i, count = 0;

			while(!visited[j])
			{
				visited[j] = true;
				j = arr[j]-1;
				count++;
			}

			if(count != 0) 
				swaps += count - 1;
		}

		return swaps;
    }