Longest Increasing Path in a Matrix

Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].

Example 2:

Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.


// DFS - Memoization - of each cell in matrix - traverse only if the path is increasing

	public int longestIncreasingPath(int[][] matrix) {
        if(matrix.length == 0 || matrix[0].length == 0) return 0;
        int m = matrix.length;
        int n= matrix[0].length;
        
        int[][] cache = new int[m][n];
        int longPath = 0;
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                longPath = Math.max(longPath, DFS(matrix, i, j, m, n, cache));
            }
        }
        return longPath;
    }
    
    public int DFS(int[][] matrix, int i, int j, int m, int n, int[][] cache) {
        if(cache[i][j] != 0) return cache[i][j];
        int res = 0;
        
        if(i>0 && matrix[i][j] < matrix[i-1][j]) 
            res = Math.max(res , DFS(matrix, i-1, j, m, n, cache));
        if(i<m-1 && matrix[i][j] < matrix[i+1][j]) 
            res = Math.max(res , DFS(matrix, i+1, j, m, n, cache));
        if(j>0 && matrix[i][j] < matrix[i][j-1]) 
            res = Math.max(res , DFS(matrix, i, j-1, m, n, cache));
        if(j<n-1 && matrix[i][j] < matrix[i][j+1]) 
            res = Math.max(res , DFS(matrix, i, j+1, m, n, cache));
        
        cache[i][j] = res + 1;
        return cache[i][j];
    }