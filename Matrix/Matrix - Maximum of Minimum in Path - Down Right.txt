Max Of Min Altitudes

Given a matrix with r rows and c columns, find the maximum score of a path starting at [0, 0] and ending at [r-1, c-1]. The score of a path is the minimum value in that path. For example, the score of the path 8 → 4 → 5 → 9 is 4.

Don't include the first or final entry. You can only move either down or right at any point in time.

Example:

Input:
[[1, 2, 3]
 [4, 5, 1]]

Output: 4
Explanation:
Possible paths:
1-> 2 -> 3 -> 1
1-> 2 -> 5 -> 1
1-> 4 -> 5 -> 1
So min of all the paths = [2, 2, 4]. Note that we don't include the first and final entry.
Return the max of that, so 4.

// Dynammic Programming

	private static int maxScore2D(int[][] grid) {
    
		int m = grid.length, n = grid[0].length;
		int[][] dp = new int[m][n];
		
		dp[0][0] = Integer.MAX_VALUE; // first entry is not considered
		
		for (int i = 1; i < m; ++i) 
			dp[i][0] = Math.min(dp[i - 1][0], grid[i][0]);
		for (int j = 1; j < n; ++j) 
			dp[0][j] = Math.min(dp[0][j - 1], grid[0][j]);
		
		
		for (int i = 1; i < m; i++) { 
			for (int j = 1; j < n; j++) {
				if (i == r - 1 && j == c - 1) {
					dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); // last entry is not considered
				} else {
					int score1 = Math.min(dp[i][j - 1], grid[i][j]); // left
					int score2 = Math.min(dp[i - 1][j], grid[i][j]); // up
					dp[i][j] = Math.max(score1, score2);
				}
			}
		}
		return dp[m - 1][n - 1];
  }