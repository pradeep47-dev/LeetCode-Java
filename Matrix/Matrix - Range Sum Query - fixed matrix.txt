Range Sum Query - Immutable - Matrix never changes

Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.

Example:

Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3


    public int[] sum;
    
    public NumArray(int[] nums) {
        sum = new int[nums.length + 1];
        
        for(int i=0;i<nums.length;i++) {
            sum[i+1] = sum[i] + nums[i];
        }
    }
    
    public int sumRange(int i, int j) {
        return sum[j+1] - sum[i];
    }



Range Sum Query 2D - Immutable

Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

Example:

Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12

(Caching Smarter) [Accepted]

// Dynammic Programming - caching cumulative sum 

// we could pre-compute a cumulative region sum with respect to the origin at (0,0)(0, 0)(0,0).

How do we derive Sum(ABCD)Sum(ABCD)Sum(ABCD) using the pre-computed cumulative region sum?

Sum OB
Sum(OB) is the cumulative region sum on top of the rectangle.

Sum OC
Sum(OC) is the cumulative region sum to the left of the rectangle.

Sum OA
Sum(OA) is the cumulative region sum to the top left corner of the rectangle.

Note that the region Sum(OA) is covered twice by both Sum(OB) and Sum(OC). We could use the principle of inclusion-exclusion to calculate Sum(ABCD) as following:

Sum(ABCD) = Sum(OD)−Sum(OB)−Sum(OC)+Sum(OA) 


class NumMatrix {
    private int[][] dp;
    
    public NumMatrix(int[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) return;
        dp = new int[matrix.length + 1][matrix[0].length + 1];
        for (int r = 0; r < matrix.length; r++) {
            for (int c = 0; c < matrix[0].length; c++) {
                dp[r + 1][c + 1] = dp[r + 1][c] + dp[r][c + 1] + matrix[r][c] - dp[r][c];
            }
        }
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
         return dp[row2 + 1][col2 + 1] - dp[row1][col2 + 1] - dp[row2 + 1][col1] + dp[row1][col1];
    }
}


 