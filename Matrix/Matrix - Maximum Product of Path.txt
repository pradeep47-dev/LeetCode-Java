Matrix product

Given a matrix, find the path from top left to bottom right with greatest product by moving only down and right.

Eg.
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]
1 -> 4 -> 7 -> 8 -> 9
2016

[-1, 2, 3]
[4, 5, -6]
[7, 8, 9]
1 -> 4 -> 5 -> 6 -> 9
1080

// DP
// keep temp cache of max product and min product each iteration
// use it for next row

	public static int matrixProduct(int[][] matrix)
    {
        if (matrix.Length == 0 || matrix[0].Length == 0) return 0;
		int m = matrix.Length, n = matrix[0].Length;
        
        int[][] maxCache = new int[m][n];
        int[][] minCache = new int[m][n];
       
        for (int i = 0; i < m; i++)
        {        
            for (int j = 0; j < n; j++)
            {
                int maxVal = Integer.MIN_VALUE;
                int minVal = Integer.MAX_VALUE;

                // If you're in the top left corner, just copy to cache
                if (i == 0 && j == 0)
                {
                    maxVal = matrix[i][j];
                    minVal = matrix[i][j];
                }

                // If we're not at the top, consider the value above
                if (i > 0)
                {
                    int tempMax = Math.Max(matrix[i][j] * maxCache[i - 1][j], matrix[i][j] * minCache[i - 1][j]);
                    maxVal = Math.Max(tempMax, maxVal);
                    int tempMin = Math.Min(matrix[i][j] * maxCache[i - 1][j], matrix[i][j] * minCache[i - 1][j]);
                    minVal = Math.Min(tempMin, minVal);
                }
				
                // If we're not on the left, consider the value to the left
                if (j > 0)
                {
                    int tempMax = Math.Max(matrix[i][j] * maxCache[i][j - 1], matrix[i][j] * minCache[i][j - 1]);
                    maxVal = Math.Max(tempMax, maxVal);
                    int tempMin = Math.Min(matrix[i][j] * maxCache[i][j - 1], matrix[i][j] * minCache[i][j - 1]);
                    minVal = Math.Min(tempMin, minVal);
                }
				
                maxCache[i][j] = maxVal;
                minCache[i][j] = minVal;
            }
        }

        // Return the max value at the bottom right
        return maxCache[m - 1][n - 1];
    }