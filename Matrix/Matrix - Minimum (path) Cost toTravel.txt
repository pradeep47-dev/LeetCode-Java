

	public static void main(String args[]) 
	{ 
		int cost[][]= {{1, 2, 3}, 
					{4, 8, 2}, 
					{1, 5, 3}}; 
		System.out.println(minCost(cost,3,3)); 
	} 
	
	
// O(1) space solution

	public int MinPathSum(int[][] grid) {
        int m = grid.Length;
        if(m==0) return 0;
        int n = grid[0].Length;
        
       for (int i = 0; i<m ; i++) {
            for (int j = 0; j<n ; j++) {
                
                if(i == 0 && j != 0)
                    grid[i][j] = grid[i][j] +  grid[i][j - 1];
                
                else if(j == 0 && i != 0)
                    grid[i][j] = grid[i][j] + grid[i - 1][j];
                
                else if(j != 0 && i != 0)
                    grid[i][j] = grid[i][j] + Math.Min(grid[i - 1][j],grid[i][j - 1]);
            }
        }
        return grid[m-1][n-1];
    }
	
// general solution 

	public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(i==0 && j==0) {
                    dp[i][j] = grid[i][j];
                }
                else if(i==0 && j!=0) {
                    dp[i][j] = dp[i][j-1] + grid[i][j];
                }
                else if(i!=0 && j==0) {
                    dp[i][j] = dp[i-1][j] + grid[i][j];
                }
                else {                
                    int min = Math.min(dp[i-1][j], dp[i][j-1]);
                    dp[i][j] = grid[i][j] + min;
                }
            }
        }
        return dp[m-1][n-1];
    }
 