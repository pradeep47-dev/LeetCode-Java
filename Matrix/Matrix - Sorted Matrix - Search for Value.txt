Search a 2D Matrix

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

    Integers in each row are sorted from left to right.
    The first integer of each row is greater than the last integer of the previous row.

Example 1 - row wise sorted

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true


// Binary Search of rows

	public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0) return false;
        int m = matrix.length;
        int n = matrix[0].length;
        
        int start = 0, end = m*n -1;
        while(start <= end) {
            int mid = (start + end) / 2;
            if(matrix[mid/n][mid%n] == target)
                return true;
            else if(matrix[mid/n][mid%n] < target)
                start++;
            else
                end--;
        }
        return false;
    }


Search a 2D Matrix - row and column wise sorted


Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

    Integers in each row are sorted in ascending from left to right.
    Integers in each column are sorted in ascending from top to bottom.

Example:

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]

Given target = 5, return true


// bi-directional search based on row and column

	public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length ==0) return false;
		
        int m = matrix.length, n = matrix[0].length;
        int start=0,end = m-1;
        
        while(start<n && end>= 0) {
            int val = matrix[i][j];
            if(val == target)
				return true;                
            else if(val < target)
                start++;
            else 
                end--;
        }
        return false;
    }
	