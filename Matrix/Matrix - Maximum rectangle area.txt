Maximal Rectangle

Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Example:

Input:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
Output: 6

// Based on Largest Rectangle in Histogram solution

	public int maximalRectangle(char[][] matrix) {
        if(matrix == null || matrix.length == 0) return 0;
        int m = matrix.length;
        int n = matrix[0].length;
        int[] heights = new int[n+1];
        int maxArea = 0;
        
        for(int i=0;i<m;i++) {
            Stack<Integer> stack = new Stack<Integer>();
            for(int j=0;j<=n;j++) {
                if(j<n) {
                    if(matrix[i][j] == '1')
                        heights[j] += 1;
                    else
                        heights[j] = 0;
                }
                
                if(stack.isEmpty() || heights[j] >= heights[stack.peek()]) {
                    stack.push(j);
                }
                else {
                    while(!stack.isEmpty() && heights[j] < heights[stack.peek()]) {
                        int top = stack.pop();
                        int area = heights[top] * (stack.isEmpty() ? j : j - stack.peek() - 1);
                        maxArea = Math.max(maxArea, area);
                    }
                    stack.push(j);
                }
            }
        }
        return maxArea;
    }