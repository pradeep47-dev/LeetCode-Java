Path With Maximum Minimum Value

Given a matrix of integers A with R rows and C columns, find the maximum score of a path starting at [0,0] and ending at [R-1,C-1].

The score of a path is the minimum value in that path.  For example, the value of the path 8 →  4 →  5 →  9 is 4.

A path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).

Example 1:

Input: [[5,4,5],[1,2,6],[7,4,6]]
Output: 4
Explanation: 
The path with the maximum score is highlighted in yellow. 

Example 2:

Input: [[2,2,1,2,2,2],[1,2,2,2,1,2]]
Output: 2


// Using PriorityQueue - BFS traverse by descending path and get the minimum value

	
	public int maximumMinimumPath(int[][] A) {
		
		PriorityQueue<int[]> pq = new PriorityQueue<>((a, b)->(b[2] - a[2]));
		int m = A.length;
		int n = A[0].length;
		
		int[][] distance = new int[m][n];
		for (int[] v : distance) {
			Arrays.fill(v, -1);
		}
		
		pq.add(new int[]{0, 0, A[0][0]});        
		distance[0][0] = A[0][0];
		
		int[] dirs = {0, 1, 0, -1, 0};
	
		while (!pq.isEmpty()) {
			int[] cell = pq.poll();
			for (int i = 0; i < 4; i++) {
				int x = cell[0] + dirs[i];
				int y = cell[1] + dirs[i+1];
				if (x>=0 && x<m && y>=0 && y<n && distance[x][y] == -1) {                    
				
					distance[x][y] = Math.min(cell[2], A[x][y]);
					if (x == m - 1 && y == n - 1) {
						return distance[x][y];
					}
					pq.add(new int[]{x, y, distance[x][y]});
				}
			}
		}
		return -1;
	}