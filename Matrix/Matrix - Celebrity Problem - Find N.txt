In a room of N people, Find the celebrity.

If A is Celebrity then,

a) Everyone else in the room should know A
b) A shouldn’t know anyone in the room.

Time complexity : O(n)

a. We maintain two pointers at the start and end corners. (a, b)
b. In the given matrix value
1. If Matrix[A][B] = 1, then A knows B
2. Else, A doesn’t know B
c. Keep moving the pointers A and B such that, if A knows B move A. Else, move A. Do this Until A < B.
d.  Finally check if A is celebrity or not by using two conditions:
1. For all i, i should know A, except i not equal to A
2. For all i, A shouldn’t know i

	
	bool  Matrix[N][N] = {{0, 0, 0, 1, 0},
						  {0, 0, 0, 1, 0},
						  {0, 0, 0, 1, 0},
						  {0, 0, 0, 0, 0},
						  {0, 0, 0, 1, 0}};
					  
    public void main(String[] args)  
    { 	
        int n = 5; 
        int result = findCelebrity(n); 
        if (result == -1)  
        { 
            System.out.println("No Celebrity"); 
        }  
        else
            System.out.println("Celebrity ID " + result); 
    } 

	
    public boolean knows(int a, int b) {         
        return (MATRIX[a][b] == 1) ? true : false; 	// Returns true if a knows b
    } 
  
    
    public int findCelebrity(int n)  // Returns -1 if celebrity is not present. returns id (value from 0 to n-1). 
    { 
        // Initialize two pointers as two corners 
        int a = 0; 
        int b = n - 1; 
          
        // Keep moving while the two pointers don't become same. 
        while (a < b)  
        { 
            if (knows(a, b)) 
                a++; 
            else
                b--; 
        } 
  
        // Check if a is actually a celebrity or not 
        for (int i = 0; i < n; i++)  
        { 
            // If any person doesn't  know 'a' or 'a' doesn't know any person, return -1 
            if (i != a && (knows(a, i) || !knows(i, a))) 
                return -1; 
        } 
        return a; 
    } 
  
    