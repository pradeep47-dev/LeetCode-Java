Range Sum Query 2D Mutable

Given a 2D matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.
Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
update(3, 2, 2)
sumRegion(2, 1, 4, 3) -> 10
Note:
The matrix is only modifiable by the update function.
You may assume the number of calls to update and sumRegion function is distributed evenly.

class NumMatrix {

	public int[][] colSum;
    public int[][] matrix;
	
    public NumMatrix(int[][] matrix) {
	
        if (matrix == null || matrix.length == 0) return;        
        if (matrix[0] == null || matrix[0].length == 0) return;
        
		this.matrix = matrix;
        int m = matrix.length;
        int n = matrix[0].length;
        colSum = new int[m + 1][n];
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j < n; j++) {
                colSum[i][j] = colSum[i - 1][j] + matrix[i - 1][j];
            }
        }
    }
 
    public void update(int row, int col, int val) {
        for (int i = row + 1; i < colSum.length; i++) {
            colSum[i][col] = colSum[i][col] - matrix[row][col] + val;
        }
        matrix[row][col] = val;
    }
 
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int sum = 0;
        for (int j = col1; j <= col2; j++) {
            sum += colSum[row2 + 1][j] - colSum[row1][j];
        }
        return sum;
    }
}
	public class RangeSumQuery2DMutable{	
		public static void main(String[] args){
			int[][] mat = new int[][]{{3, 0, 1, 4, 2}, 
									{5, 6, 3, 2, 1}, 
									{1, 2, 0, 1, 5},
									{4, 1, 0, 1, 7}, 
									{1, 0, 3, 0, 5}};
									
			NumMatrix nummat = new NumMatrix(mat);
			System.out.println(nummat.sumRegion(2, 1, 4, 3));// -> 8
			nummat.update(3, 2, 2);
			System.out.println(nummat.sumRegion(2, 1, 4, 3));// -> 10
		}	
	}