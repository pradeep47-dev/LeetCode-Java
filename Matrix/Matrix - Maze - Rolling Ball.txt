The Maze

There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.

Given the ball's start position, the destination and the maze, determine whether the ball could stop at the destination.

The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes. 

Example 1:

Input 1: a maze represented by a 2D array

0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 1 1
0 0 0 0 0

Input 2: start coordinate (rowStart, colStart) = (0, 4)
Input 3: destination coordinate (rowDest, colDest) = (4, 4)

Output: true
Explanation: One possible way is : left -> down -> left -> down -> right -> down -> right.

// Can stop at destination or not
// BFS traversal 4 directions, pass throught empty spaces same direction, stop at wall - 1

    public boolean HasPath(int[][] maze, int[] start, int[] destination) {
        
        int m = maze.Length;
        if(m==0) return false;
        int n = maze[0].Length;
        int[] dirs = { 0,1,0,-1,0 };
        
        boolean[][] visited = new boolean[m][n];        
            
        Queue<int[]> queue = new Queue<int[]>();
        queue.offer(start);
        visited[start[0]][start[1]] = true;
        
        while(!queue.isEmpty())
        {
            int[] cell = queue.poll();
            
            if(cell[0] == destination[0] & cell[1] == destination[1])
                return true;
            
            for(int i=0;i<4;i++)
            {
                int x = cell[0] + dirs[i];
                int y = cell[1] + dirs[i+1];
                
                while(x >= 0 && x<m && y>=0 && y<n && maze[x][y] == 0)
                {
                    x += dirs[i];
                    y += dirs[i+1];  
                }
                
                x = x - dirs[i];
                y = y - dirs[i+1];
                if(!visited[x][y]) 
                {
                    visited[x,y] = true;
                    queue.add(new int[] { x, y});
                }   
            }
        }
        return false;
    }


The Maze II - Return Shortest Distance of the Path

There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.

Given the ball's start position, the destination and the maze, find the shortest distance for the ball to stop at the destination. The distance is defined by the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.

Input 1: a maze represented by a 2D array

0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
1 1 0 1 1
0 0 0 0 0

Input 2: start coordinate (rowStart, colStart) = (0, 4)
Input 3: destination coordinate (rowDest, colDest) = (4, 4)

Output: 12

Explanation: One shortest way is : left -> down -> left -> down -> right -> down -> right.
             The total distance is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.
			 

/// Dijkstra Algorithm Shortest path and Priority Queue

	Time complexity : O(mn  * log(mn))	
    Space complexity : O(mn)
	
	public int shortestDistance(int[][] maze, int[] start, int[] dest)
    {
        int m = maze.Length;
        int n = maze[0].Length;
        int[][] distance = new int[m][n];

        for (int i = 0; i < m; i++)
            Arrays.fill(distance[i], Integer.MAX_VALUE);

        distance[start[0]][start[1]] = 0;

        int[] dirs = { 0, 1, 0, -1, 0 };

		PriorityQueue<int[]> queue = new PriorityQueue<int[]>((a, b) -> a[2] - b[2]);        
        queue.offer(new int[] { start[0], start[1], 0});

        while (!queue.isEmpty())
        {
            int[] s = queue.poll();               
	
			if(distance[s[0]][s[1]] < s[2])
				continue;
	
            for (int i = 0; i < 4; i++) {
                int x = s[0] + dirs[i];
                int y = s[1] + dirs[i + 1];
                int count = 0;
                while (x >= 0 && y >= 0 && x < m && y < n && maze[x][y] == 0) {
                    x += dirs[i];
                    y += dirs[i + 1];
                    count++;
                }
	
				x = x - dirs[i];
				y = y - dirs[i+1];
            
				if(distance[s[0]][s[1]] + count < distance[x][y])
				{
					distance[x][y] = distance[cell[0]][cell[1]] + count;
					queue.add(new int[] { x, y, distance[x][y]});
				}                    
            }
        }
        return distance[dest[0]][dest[1]] == Integer.MAX_VALUE ? -1 : distance[dest[0]][dest[1]];
    }
	


The Maze III - Output the directions

There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling up (u), down (d), left (l) or right (r), but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a hole in this maze. The ball will drop into the hole if it rolls on to the hole.

Given the ball position, the hole position and the maze, find out how the ball could drop into the hole by moving the shortest distance. The distance is defined by the number of empty spaces traveled by the ball from the start position (excluded) to the hole (included). Output the moving directions by using 'u', 'd', 'l' and 'r'. Since there could be several different shortest ways, you should output the lexicographically smallest way. If the ball cannot reach the hole, output "impossible".

Example 1:

Input 1: a maze represented by a 2D array

0 0 0 0 0
1 1 0 0 1
0 0 0 0 0
0 1 0 0 1
0 1 0 0 0

Input 2: ball coordinate (rowBall, colBall) = (4, 3)
Input 3: hole coordinate (rowHole, colHole) = (0, 1)

Output: "lul"

Explanation: There are two shortest ways for the ball to drop into the hole.
The first way is left -> up -> left, represented by "lul".
The second way is up -> left, represented by 'ul'.
Both ways have shortest distance 6, but the first way is lexicographically smaller because 'l' < 'u'. So the output is "lul".

// PriorityQueue


	public class Point 
    {
        public int dist;
        public int row;
        public int col;
        public string dir;  
        public Point(int dist, int row, int col, string dir)
        {
            this.dist = dist;
            this.row = row;
            this.col = col;
            this.dir = dir;
        }

        public int CompareTo(Point other)
        {
            return dist == other.dist ? dir.CompareTo(other.dir) : dist - other.dist;
        }
    }

    public string findShortestWay(int[][] maze, int[] ball, int[] hole)
    {
        int m = maze.Length;
        int n = maze[0].Length;
        bool[][] visited = new bool[m][];
        for (int i = 0; i < m; i++)
            visited[i] = new bool[n];

        
        PriorityQueue<Point> pq = new PriorityQueue<Point>();
        pq.Enqueue(new Point(0, ball[0], ball[1], ""));
        
        char[] dstr = { 'd', 'l', 'r', 'u' };
        int[] dirs = { 0,1,0,-1,0 };

        while (pq.size()>0)
        {               
            Point pt = pq.poll();
            if (pt.row == hole[0] && pt.col == hole[1])
            {
                return pt.dir;
            }
            visited[pt.row][pt.col] = true;

            for (int i = 0; i < 4; i++)
            {
                int newRow = pt.row;
                int newCol = pt.col;
                int dist = pt.dist;
                string ds = pt.dir;
            
                while (newRow + dirs[i] >= 0 && newRow + dirs[i] < m &&  newCol + dirs[i + 1] >= 0 &&  newCol + dirs[i + 1] < n && maze[newRow + dirs[i]][newCol + dirs[i + 1]] != 1)
                {
                    newRow += dirs[i];
                    newCol += dirs[i+1];
                    dist += 1;
                    if (newRow == hole[0] && newCol == hole[1])
                    {
                        break;
                    }
                }
               
                if (!visited[newRow][newCol])
                {
                    pq.add(new Point(dist, newRow, newCol, ds + dstr[i]));
                }
            }
        }
        return "impossible";
    }