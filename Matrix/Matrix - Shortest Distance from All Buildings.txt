Best Meeting Point

A group of two or more people wants to meet and minimize the total travel distance. 
You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. 
The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

Example:

Input: 

1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0

Output: 6 

Explanation: Given three people living at (0,0), (0,4), and (2,2):
             The point (0,2) is an ideal meeting point, as the total travel distance 
             of 2+2+2=6 is minimal. So return 6.


mean minimizes total distance for euclidian distance
median minimzes total distance for absolute deviation
mode minimizes distance for indicator function


 * consider a 1D case, Just find the median of all the x coordinates and calculate the distance to the median.


 * assume i and j as two meet points.
 * All the people in [0, i] go to meet at i and all the people in [j, n - 1] meet at j. 
 * We let left = sum(vec[:i+1]), right = sum(vec[j:]), which are the number of people at each meet point, 
 * d is the total distance for the left people meet at i and right people meet at j.

 * If we increase i by 1, the distance will increase by left since there are 'left' people at i and they just move 1 step. 
 * The same applies to j, when decrease j by 1, the distance will increase by right. To make sure the total distance d 
	is minimized we certainly want to move the point with less people. And to make sure we do not skip any possible meet 
	point options we need to move one by one.


Moreover, the solution is still O(mn) with the follow up:

    What if there are people sharing same home?  In other words the number in the grid can be more than 1.
	
	
	public int minTotalDistance(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] rowSum = new int[n];
        int[] colSum = new int[m];
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                rowSum[j] += grid[i][j];
                colSum[i] += grid[i][j];
            }
        }
        
        return minDist(rowSum) + minDist(colSum);
    }	
	
	private int minDist(int[] nums) {
        int i = 0, j = nums.length - 1;
        int leftSum = nums[i];
        int rightSum = nums[j];
        int sum = 0;
        while (i < j) {
            if (leftSum < rightSum) {
                sum += leftSum;
                leftSum += nums[++i];
            } else {
                sum += rightSum;
                rightSum += nums[--j];
            }
        }
        return sum;
    }
	

time is then O(mn) and extra space is O(m+n)

// Using ArrayList

	public int minTotalDistance(int[][] grid) {
		int m = grid.length, n = grid[0].length;
	
		List<Integer> I = new ArrayList<Integer>();
		List<Integer> J = new ArrayList<Integer>();
		
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					I.add(i);
				}
			}
		}
		for (int j = 0; j < n; j++) {
			for (int i = 0; i < m; i ++) {
				if (grid[i][j] == 1) {  
					J.add(j);
				}
			}
		}
		return minTotalDistance(I) + minTotalDistance(J);
	}
	
	public int minTotalDistance(List<Integer> grid) {
		int i = 0, j = grid.size() - 1, sum = 0;
		while (i < j) {
			sum += grid.get(j--) - grid.get(i++);
		}
		return sum;
	}





