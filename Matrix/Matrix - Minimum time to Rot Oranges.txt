Rotting Oranges

In a given grid, each cell can have one of three values:

    the value 0 representing an empty cell;
    the value 1 representing a fresh orange;
    the value 2 representing a rotten orange.

Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

Example 1:

Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

// Breadth first search
// add all rotten orange - indexes in a queue
// BFS the queue in 4 directions
// if all cells turned to rotten, return the minutes

public class Solution {
      public int orangesRotting(int[][] grid) {
        if(grid == null || grid.length ==0) return 0;
        
        int m = grid.length;
        int n = grid[0].length;      
        int minutes = 0, oranges = 0;
        Queue<int[]> que = new LinkedList<>();
        
        for(int i=0;i<m;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j] == 2) 
                    que.add(new int[] { i, j});
                else if(grid[i][j] == 1)
                    oranges++;
            }
        }
        
        int[] dirs = { 0,1,0,-1,0};
        
        while(!que.isEmpty()) {    
            for(int i=que.size();i>0;i--) {
                int[] curr = que.poll();
				
                for(int j=0;j<4;j++) {
                    int x = curr[0] + dirs[j];
                    int y = curr[1] + dirs[j+1];
                    
                    if(x>=0 && x<m && y>=0 && y<n && grid[x][y]==1) {
                        grid[x][y] = 2;
                        oranges--;
                        que.add(new int[] {x,y});
                    }
                }
            }
            if(que.size() > 0) minutes++;
        }
		
        if(oranges == 0) return minutes;
        return -1;
    }    
}

	TC - O(n), where n - number of cells in the grid.