Rotate Image

You are given an n x n matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:

Given input matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

rotate the input matrix in-place such that it becomes:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]

// Clock - Wise

	public void Rotate(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        
        for(int i=0;i<n;i++) {
            for(int j=i+1; j<n;j++) {				// swap Diagonally
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        
        for(int i=0;i<n;i++) {
            int start = 0, end = n-1;			// swap left and right columns of each row
            while(start < end) {
                int temp = matrix[i][start];
                matrix[i][start] = matrix[i][end];
                matrix[i][end] = temp;
                start++;
                end--;
            }
        }        
    }
	
// Anti - Clock Wise

	static void rotateMatrix(int N, int mat[][]) 
    {        
        for (int x = 0; x < N / 2; x++) {          
            for (int y = x; y < N - x - 1; y++) { 
               
                int temp = mat[x][y];   
                
                mat[x][y] = mat[y][N - 1 - x]; 			// Move values from right to top   
                
                mat[y][N - 1 - x] = mat[N - 1 - x][N - 1 - y]; // Move values from bottom to right   
                
                mat[N - 1 - x][N - 1 - y] = mat[N - 1 - y][x]; // Move values from left to bottom   
                
                mat[N - 1 - y][x] = temp; // Assign temp to left 
            } 
        } 
    } 