Convert Sorted List to Binary Search Tree

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5


// Linked List to BST - inorder - get the height of linked list and create BST like array
    
    private ListNode node;
    
    public TreeNode SortedListToBST(ListNode head) {
        
        if(head == null) return null;	    
	
	    int size = 0;
	    ListNode runner = head;
	    node = head;
	
	    while(runner != null){
		    runner = runner.next;
		    size ++;
	    }
	
	  return inorderHelper(0, size - 1);
   }
   

   public TreeNode inorderHelper(int start, int end)
   {
       if(start > end) return null;
       
       int mid = start + (end - start) / 2;
       
       TreeNode left = inorderHelper(start, mid - 1);
       
       TreeNode root = new TreeNode(node.val);
       root.left = left;
       
       node = node.next;
       
       root.right  = inorderHelper(mid+1, end);      
       return root;
   } 
  

// Convert DLL to BST - recursive


	Node head - DLL node
  
   
    Node sortedListToBST() 
    {         
        int n = countNodes(head);   
       
        return sortedListToBSTRecur(n); 
    }   
	
	int countNodes(Node head) 
    { 
        int count = 0; 
        Node temp = head; 
        while (temp != null) 
        { 
            temp = temp.next; 
            count++; 
        } 
        return count; 
    } 
   
    Node sortedListToBSTRecur(int n) 
    {        
        if (n <= 0) 
            return null; 
  
        /* Recursively construct the left subtree 
        Node left = sortedListToBSTRecur(n / 2); 
  
        /* head_ref now refers to middle node, make middle node as root of BST
        Node root = head; 
  
        // Set pointer to left subtree 
        root.prev = left; 
  
        /* Change head pointer of Linked List for parent recursive calls */
        head = head.next; 
  
        /* Recursively construct the right subtree and link it with root. 
        root.next = sortedListToBSTRecur(n - n / 2 - 1); 
  
        return root; 
    }