Linked List Random Node

Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.

Follow up:
What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?

Example:

// Init a singly linked list [1,2,3].
ListNode head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
Solution solution = new Solution(head);

// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.

// assign a random number to every element in the stream, and keep the top 1,000 numbered elements at all times. 

class Solution {
    
    public Random rand;
    public ListNode head;
	
    public Solution(ListNode node) {
        head = node;
        rand = new Random();
    }    
   
    public int getRandom() {
        ListNode node = null;
        ListNode curr = head;
        
        for(int i=1; curr != null; i++) {
            if(rand.nextInt(i) == 0)
                node = curr;
            curr = curr.next;
        }
        
        return node.val;
    }
}




