 Linked List Cycle

Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.
 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node.


// Floyd's Algorithm

    public bool HasCycle(ListNode head) {
        
        if(head == null || head.next == null) return false;
        
        ListNode slow = head, fast = head.next;
        
        while(slow != fast)
        {
            if(fast == null || fast.next == null)
                return false;
            
            slow = slow.next;
            fast = fast.next.next;
        }
        return true;
    }	

 
    int detectAndRemoveLoop(Node node) 
    { 
        Node slow = node, fast = node; 
        while (fast != null && fast.next != null) { 
            slow = slow.next; 
            fast = fast.next.next;   
           
            if (slow == fast) { 
                removeLoop(slow, node); 
                return 1; 
            } 
        } 
        return 0; 
    } 
  
    // Function to remove loop 
	
    void removeLoop(Node loop, Node curr) 
    { 
        Node ptr1 = null, ptr2 = null; 
  
        /* Set a pointer to the beginning of the Linked List and move it one by one to find the first node which is part of the Linked List */
        ptr1 = curr; 
        while (true) { 
  
            /* Now start a pointer from loop_node and check if it ever reaches ptr2 */
            ptr2 = loop; 
            while (ptr2.next != loop && ptr2.next != ptr1) { 
                ptr2 = ptr2.next; 
            } 
  
            /* If ptr2 reaced ptr1 then there is a loop. So break the loop */
            if (ptr2.next == ptr1) { 
                break; 
            } 
  
            /* If ptr2 did't reach ptr1 then try the next node after ptr1 */
            ptr1 = ptr1.next; 
        } 
  
        /* After the end of loop ptr2 is the last node of the loop. So make next of ptr2 as NULL */
        ptr2.next = null; 
    } 
	
	
Linked List Cycle II

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. 
If pos is -1, then there is no cycle in the linked list.
 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.


	public ListNode DetectCycle(ListNode head) {
         if (head == null) {
            return null;
        }

        ListNode intersect = getIntersect(head);
        if (intersect == null) {
            return null;
        }
       
        ListNode ptr1 = head;
        ListNode ptr2 = intersect;
        while (ptr1 != ptr2) {
            ptr1 = ptr1.next;
            ptr2 = ptr2.next;
        }

        return ptr1;
    }
    
    private ListNode getIntersect(ListNode head) {        
        
       ListNode slow = head, fast = head;
        
        while(fast != null && fast.next != null)
        {           
            slow = slow.next;
            fast = fast.next.next;
            
             if (slow == fast) {
                return slow;
            }            
        }        
        
        return null;
    }