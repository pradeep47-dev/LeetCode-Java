Sort List

Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4

Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

/// Merge Sort - Split nodes and merge them

	public ListNode SortList(ListNode head)
	{
		if (head == null || head.next == null) return head;
		ListNode slow = head;
		ListNode fast = head.next;
		while (fast != null && fast.next != null)
		{
			slow = slow.next;
			fast = fast.next.next;
		}
		ListNode list2 = slow.next;
		slow.next = null;
		return merge(SortList(head), SortList(list2));
	}
	
	public ListNode merge(ListNode list1, ListNode list2)
	{
		ListNode dummy = new ListNode(-1);
		ListNode node = dummy;
		while (list1 != null && list2 != null)
		{
			if (list1.val < list2.val)
			{
				node.next = list1;
				list1 = list1.next;
			}
			else
			{
				node.next = list2;
				list2 = list2.next;
			}
			node = node.next;
		}
		if (list1 != null) node.next = list1;
		if (list2 != null) node.next = list2;
		return dummy.next;
	}
		
		
Sort Binary Linked List

Given a Linked List A consisting of N nodes.

The Linked List is binary i.e data values in the linked list nodes consist of only 0's and 1's.

You need to sort the linked list and return the new linked list.

Input 1:
 1 -> 0 -> 0 -> 1

Output 1:
 0 -> 0 -> 1 -> 1
	
	public ListNode solve(ListNode A) {
		ListNode iter = A;
		ListNode one = A;
		while(iter!=null){
			if(iter.val==0){
				iter.val = one.val;
				one.val = 0;
				one = one.next;
				iter = iter.next;
			}else{
				iter = iter.next;
			}
		}
		return A;
	}
	

Sort a linked list of 0s, 1s and 2s - Binary

Given a linked list of 0s, 1s and 2s, sort it.

Examples:

    Input: 1 -> 1 -> 2 -> 0 -> 2 -> 0 -> 1 -> NULL
    Output: 0 -> 0 -> 1 -> 1 -> 1 -> 2 -> 2 -> NULL

    Input: 1 -> 1 -> 2 -> 1 -> 0 -> NULL
    Output: 0 -> 1 -> 1 -> 1 -> 2 -> NULL 
	
	
	
	public void sortList(Node *head)  
	{  
		// initialise count of 0 1 and 2 as 0 
		int count[] = {0, 0, 0};  
		
		Node ptr = head; 
		
		/* count total number of '0', '1' and '2' 
		* count[0] will store total number of '0's 
		* count[1] will store total number of '1's 
		* count[2] will store total number of '2's  */
		while (ptr != null)  
		{ 
				count[ptr.data]++; 
				ptr = ptr.next; 
		} 
	
		int i = 0; 
		ptr = head; 
	
		/* Let say count[0] = n1, count[1] = n2 and count[2] = n3 
		* now start traversing list from head node, 
		* 1) fill the list with 0, till n1 > 0 
		* 2) fill the list with 1, till n2 > 0 
		* 3) fill the list with 2, till n3 > 0  */
		while (ptr != null)  
		{ 
			if (count[i] == 0) 
				i++; 
			else 
			{ 
			ptr.data= i; 
			--count[i]; 
			ptr = ptr.next; 
			} 
		}  
	}  