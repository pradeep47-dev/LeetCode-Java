Find if there is a path between two vertices in a directed graph

Given a Directed Graph and two vertices in it, check whether there is a path from the first given vertex to second.

Example:

Consider the following Graph:

Input : (u, v) = (1, 3)
Output: Yes
Explanation: There is a path from 1 to 3, 1 -> 2 -> 3

Input : (u, v) = (3, 6)
Output: No
Explanation: There is no path from 3 to 6

Approach: Either Breadth First Search (BFS) or Depth First Search (DFS) can be used to find path between two vertices. Take the first vertex as source in BFS (or DFS), follow the standard BFS (or DFS). If the second vertex is found in our traversal, then return true else return false.


// BFS - Create a queue and a visited array of number of vertices.
// Insert the starting node in the queue
// Run a loop until the queue is not empty, Dequeue the front element of the queue. 
// Iterate all its adjacent elements. If any of the adjacent element is the destination return true. 
// Push all the adjacent and unvisted vertices in the queue and mark them as visited.
// Return false as the destination is not reached in BFS.


class Graph 
{ 
    private int V;   
    private LinkedList<Integer> adj[];   
    
    Graph(int v) 
    { 
        V = v; 
        adj = new LinkedList[v]; 
        for (int i=0; i<v; ++i) 
            adj[i] = new LinkedList(); 
    }   
    
    void addEdge(int v,int w)  {   
		adj[v].add(w);   
	}   
    
    boolean isReachable(int s, int d) 
    { 
        boolean visited[] = new boolean[V];   
        visited[s]=true;      
		
        Queue<Integer> queue = new LinkedList<Integer>();   
        queue.add(s);        
        
        while (!queue.isEmpty()) 
        { 
            s = queue.poll(); 
  
            int n; 
            LinkedList<Integer> temp = adj[s];   
            
            for (int n : temp) 
            {        
                // If this adjacent node is the destination node, then return true 
                if (n==d) 
                    return true;   
                
                if (!visited[n]) 
                { 
                    visited[n] = true; 
                    queue.add(n); 
                } 
            } 
        } 
       
        return false; 
    } 
  
    
    public static void main(String args[]) 
    {         
        Graph g = new Graph(4); 
        g.addEdge(0, 1); 
        g.addEdge(0, 2); 
        g.addEdge(1, 2); 
        g.addEdge(2, 0); 
        g.addEdge(2, 3); 
        g.addEdge(3, 3); 
  
        int u = 1; 
        int v = 3; 
        if (g.isReachable(u, v)) 
            System.out.println("There is a path from " + u +" to " + v); 
        else
            System.out.println("There is no path from " + u +" to " + v);   
    } 