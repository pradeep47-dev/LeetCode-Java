
Given an undirected graph represented as an adjacency matrix and an integer k.

write a function to determine whether each vertex in the graph can be colored such that no two adjacent vertices share the same color using at most k colors.

	
		int graph[][] = {{0, 1, 1, 1}, 
						 {1, 0, 1, 0}, 
						 {1, 1, 0, 1}, 
						 {1, 0, 1, 0}}; 
		int m = 3; // Number of colors 
				

// DFS 

	final int V = 4; 
	int color[]; 
	
	public boolean graphColoring(int graph[][], int m) 
	{ 		
		color = new int[V]; 
			
		if (!DFSgraphColoring(graph, m, color, 0)) 
		{ 
			System.out.println("Solution does not exist"); 
			return false; 
		} 
		printSolution(color); 
		return true; 
	} 
		
	public boolean DFSgraphColoring(int graph[][], int m,int color[], int v) 
	{ 		
		if (v == V) 
			return true; 
	
		for (int c = 1; c <= m; c++) 
		{ 
			if (isSafe(v, graph, color, c)) 
			{ 
				color[v] = c; 
				
				if (DFSgraphColoring(graph, m, color, v + 1)) 
					return true; 				
				color[v] = 0; 
			} 
		} 
	
		return false; 
	} 
	
	public boolean isSafe(int v, int graph[][], int color[], int c) 
	{ 
		for (int i = 0; i < V; i++) 
			if (graph[v][i] == 1 && c == color[i]) 
				return false; 
		return true; 
	} 
	
	void printSolution(int color[]) 
	{ 
		System.out.println("Solution Exists: Following" + " are the assigned colors"); 
		for (int i = 0; i < V; i++) 
			System.out.print(" " + color[i] + " "); 
		System.out.println(); 
	} 
	
	


