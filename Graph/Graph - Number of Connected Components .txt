Number of Connected Components in an Undirected Graph

Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

For example:

0          3
|          |
|          |
1 --- 2    4

Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.


// Union - Find 

	private int count;
	
    public int countComponents(int n, int[][] edges) {
        this.count = n;
        int[] parent = new int[n];
		int[] rank = new int[n];
        for (int i = 0; i < n; ++i) {
			parent[i] = i;
			rank[i] = 1;
		}
        
		for (int[] edge : edges) {
            union(parent, rank, edge[0], edge[1]);
        }

        return this.count;
    }

    private int find(int[] parent, int p) {
        while (p != parent[p]) {
            parent[p] = parent[parent[p]];    // path compression by halving
            p = parent[p];
        }
        return p;
    }

    private void union(int[] parent,int[] rank, int src, int dst) {
        int p1 = find(parent, src);
        int p2 = find(parent, dst);
        if (p1 != p2) {
            if (rank[p1] > rank[p2]) { // Merge small rank to large rank
                parent[p2] = p1;
				rank[p1] += rank[p2];                
            } else {
                parent[p1] = p2;
				rank[p2] += rank[p1];                
            }
            count--;
        }
    }
	
	O(n + m), m is the length of connections (union operations).

// DFS

	public int makeConnected(int n, int[][] connections) {
        if (connections.length < n - 1) return -1; // To connect all nodes need at least n-1 edges
        List<Integer>[] graph = new List[n];
        for (int i = 0; i < n; i++) 
			graph[i] = new ArrayList<>();
			
        for (int[] c : connections) {
            graph[c[0]].add(c[1]);
            graph[c[1]].add(c[0]);
        }
        int components = 0;
        boolean[] visited = new boolean[n];
        for (int v = 0; v < n; v++) 
			components += dfs(v, graph, visited);
				
        return components - 1; // Need (components-1) cables to connect components together
    }
	
    public int dfs(int u, List<Integer>[] graph, boolean[] visited) {
        if (visited[u]) return 0;
        visited[u] = true;
        for (int v : graph[u]) 
			dfs(v, graph, visited);
        return 1;
    } 
	
	
    Time: O(n+m), m is the length of connections
    Space: O(n)

