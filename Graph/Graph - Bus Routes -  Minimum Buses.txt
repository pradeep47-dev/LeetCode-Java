Bus Routes

We have a list of bus routes. Each routes[i] is a bus route that the i-th bus repeats forever. For example if routes[0] = [1, 5, 7], this means that the first bus (0-th indexed) travels in the sequence 1->5->7->1->5->7->1->... forever.

We start at bus stop S (initially not on a bus), and we want to go to bus stop T. Travelling by buses only, what is the least number of buses we must take to reach our destination? Return -1 if it is not possible.

Example:
Input: 
routes = [[1, 2, 7], 
		  [3, 6, 7]]
S = 1
T = 6
Output: 2
Explanation: 
The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.



// Directed Graph - BFS traversal to get shortest / minimum buses

    public int NumBusesToDestination(int[][] routes, int S, int T) {            
        if(S == T) return 0;
        
        Map<Integer,List<Integer>> graph = new HashMap<>();       
        
        for(int i=0;i<routes.length;i++)
        {
            for(int j=0;j<routes[i].length;j++)
            {
                int route = routes[i][j];
                
                graph.putIfAbsent(route, new ArrayList<>());                
                graph.get(route).add(i);
            }
        }
        
        Set<Integer> visited = new Set<Integer>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(S);
        
        for(int result = 1; queue.size() > 0; result++)
        {
            int size = queue.size();
            
            for(int i=0;i<size;i++)
            {
                int route = queue.poll();  
                
                for(int bus : graph.get(route))
                {
                    if(!visited.contains(bus))
                    {
                        visited.add(bus);
                    
                        for(int j=0;j<routes[bus].length;j++)
                        {
                            if(routes[bus][j] == T) return result;
                            queue.add(routes[bus][j]);
                        }                    
                    }   
                }           
            }
        }
        return -1;
    }
