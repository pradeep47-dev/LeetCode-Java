Shortest Path with Alternating Colors

Consider a directed graph, with nodes labelled 0, 1, ..., n-1.  In this graph, each edge is either red or blue, and there could be self-edges or parallel edges.

Each [i, j] in red_edges denotes a red directed edge from node i to node j.  Similarly, each [i, j] in blue_edges denotes a blue directed edge from node i to node j.

Return an array answer of length n, where each answer[X] is the length of the shortest path from node 0 to node X such that the edge colors alternate along the path (or -1 if such a path doesn't exist).
 
Example 1:

Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
Output: [0,1,-1]

Example 2:

Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
Output: [0,1,-1]

Example 3:

Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
Output: [0,-1,-1]

Example 4:

Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
Output: [0,1,2]


// Two HashSets one for blue and another for red
// red edges in 0 - col
// blue edges in 1 - col
// Add entries to queue, start point, either with red or blue (BFS)
// only keep color - and the length which is derived from previous node


	public int[] shortestAlternatingPaths(int n, int[][] red_edges, int[][] blue_edges) {
        
        Set<Integer>[][] graph = new HashSet[2][n];
        for (int i = 0; i < n; i++) {
            graph[0][i] = new HashSet<>();
            graph[1][i] = new HashSet<>();
        }
        
        for (int[] re : red_edges) {
            graph[0][re[0]].add(re[1]);
        }
       
        for (int[] blu : blue_edges) {
            graph[1][blu[0]].add(blu[1]);
        }
		
        int[][] res = new int[2][n];        
        for (int i = 1; i < n; i++) {
            res[0][i] = 2 * n;
            res[1][i] = 2 * n;
        }
       
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[] {0, 0}); 
        q.offer(new int[] {1, 0}); 
		
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int color = cur[0];
            int edge= cur[1];                  
			
            for (int nxt : graph[1 - color][edge]) {
                if (res[1 - color][nxt] == 2 * n) {
                    res[1 - color][nxt] = 1 + res[color][edge];
                    q.offer(new int[] { 1 - color, nxt});
                }
            }
        }
		
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            int t = Math.min(res[0][i], res[1][i]);
            ans[i] = (t == 2 * n) ? -1 : t;
        }
        return ans;
    }