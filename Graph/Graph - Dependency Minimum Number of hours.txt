You have N programs and want to run each of them exactly once. Each program takes exactly one hour to complete. 
You can run multiple programs in parallel, but some programs depend on the output from one or more other programs and 
thus can be run only after their completion. 

Given the dependency between programs, please compute the minimum number of hours
you need to run all programs.

Example:
Suppose the input is as follows

1
5 5
1 3
3 4
2 3
3 5
1 4

Here taking the dependencies into consideration we can do the the task in 3 hours in this manner 
each hour as we can perform parralel tasks too.
[[1,2], [3] , [4,5]].


	public static void main(String[] args) {
		int k = 5;
		int[][] nums = {{1, 3}, {3, 4}, {2, 3}, {3, 5}, {1, 4}};
		System.out.println(solve(k, nums));
	}

// Directed graph with dependency - noted with inDegree array
// BFS traversal without sorting dependency

	private static int solve(int k, int[][] nums) {
		List<List<Integer>> res = new ArrayList<>();
		int[] inDegree = new int[k+1];
		
		Map<Integer, Set<Integer>> map = new HashMap<>();
		for(int[] n : nums) {
			inDegree[n[1]]++;
			map.putIfAbsent(n[0], new HashSet<>());
			map.get(n[0]).add(n[1]);
		}
		
		Queue<Integer> q = new LinkedList<>();
		List<Integer> visited = new ArrayList<>();
		for(int i=1;i<k+1;i++) {
			if(inDegree[i] == 0) {
				q.offer(i);
				visited.add(i);
			}
		}
		
		res.add(new ArrayList<>(visited));
		
		while(!q.isEmpty()) {			
			visited = new ArrayList<>();
			
			for(int i= q.size();i>0;i--) {
				int cur = q.poll();
				for(int nei : map.getOrDefault(cur, new HashSet<>())) {
					inDegree[nei]--;
					if(inDegree[nei] == 0) {
						q.offer(nei);
						visited.add(nei);
					}
				}
			}
			if(visited.size() > 0) {
				res.add(new ArrayList<>(visited));
			}
		}
		System.out.println(res);
		return res.size();
	}

[[1, 2], [3], [4, 5]]
3