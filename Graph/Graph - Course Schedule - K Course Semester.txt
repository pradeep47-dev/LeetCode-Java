Parallel Courses

Given the integer n representing the number of courses at some university labeled from 1 to n, 
and the array dependencies where dependencies[i] = [xi, yi] represents a prerequisite relationship, 
that is, the course xi must be taken before the course yi.  Also, you are given the integer k.

In one semester you can take at most k courses as long as you have taken all the prerequisites for the courses you are taking.

Return the minimum number of semesters to take all courses. It is guaranteed that you can take all courses in some way.
 

Example 1:

Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2
Output: 3 
Explanation: In this case we can take courses 2 and 3 in the first semester, then take course 1 in the second semester and finally take course 4 in the third semester.

Example 2:

Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2
Output: 4 
Explanation: The figure above represents the given graph. In this case one optimal way to take all courses is: take courses 2 and 3 in the first semester and take course 4 in the second semester, then take course 1 in the third semester and finally take course 5 in the fourth semester.


// Directed Graph - DFS
// ingress - represents the dependencies
// order the group by depth
// if ingress is 0 - Completed with dependencies for K courses -> add count

	public int minNumberOfSemesters(int n, int[][] dependencies, int k) {
        ArrayList<Integer>[] graph = new ArrayList[n+1];
        int[] ingress = new int[n+1];
        Integer[] depth = new Integer[n+1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new ArrayList<>();
        }
		
        for(int[] d : dependencies) {
            graph[d[0]].add(d[1]);
            ingress[d[1]]++;
        }
        
        PriorityQueue<int[]> queue = new PriorityQueue<>((x, y) -> y[1] - x[1]);
        for (int i = 1; i <= n; i++) {
            if (ingress[i] == 0) {
                dfs(i, graph, depth);
                queue.offer(new int[]{i, depth[i]});
            }
        }
        
        int res = 0;
        while (!queue.isEmpty()) {
            res++;
            int x = k;
            List<int[]> new_list = new ArrayList<>();
            while (x-- > 0 && !queue.isEmpty()) {
                int[] cur = queue.poll();
                for (int d : ds[cur[0]]) {
                    ingress[d]--;
                    if (ingress[d] == 0) {
                        new_list.add(new int[]{d, depth[d]});
                    }
                }
            }
            for (int[] i : new_list) {
                queue.offer(i);
            }
        }
        return res;
    }
    
    private int dfs(int cur, ArrayList<Integer>[] ds, Integer[] depth) {
        if (depth[cur] != null) {
            return depth[cur];
        }
        int res = 1;
        for (int d : ds[cur]) {
            res = Math.max(res, 1 + dfs(d, ds, depth));
        }
        depth[cur] = res;
        return res;
    }