Assume we have a dictionary of the user and a list of his friends. There is another dictionary present which has a mapping of a user and a list of movies he has watched sorted by timestamp with the most recent on the top of the list. 

Given a user, make a recommendation of top K movies based on a list of movies his friends have watched or friend of a friend has watched. Assume the data needs to be collected only for up to the Nth degree of a friend. 

Example:  

Given  user_follows = {'A': ['B', Z'], 'B': ['C'], 'C': ['D']},

movies = {'B': [mvi1, mvi2], 'C': [mvi3, mvi1, mvi2], 'D': ['mvi3']},
If k =2 and N=2, then the k recommended movies to user A are result = ['mvi1', 'mvi2']. 

Explanation: N =2 implies that the result is only interested in getting recommendations based on immediate friends and 
immediate friends of the user's immediate friends.



	public List<String> movieRecomm(Map<String, List<String>> userFollows, Map<String, List<String>> movieData, int k,
			int N) {

		List<String> res = new ArrayList<>(k);

		Set<String> visited = new HashSet<>();
		Set<String> movies = new HashSet<>();

		Queue<String> q = new ArrayDeque<>();
		q.add("A");

		while (!q.isEmpty() && N > 0) {
			int size = q.size();
			for (int i = 0; i < size; i++) {
				String current = q.poll();

				if (visited.contains(current))
					continue;
				visited.add(current);

				List<String> movieList = movieData.getOrDefault(current, new ArrayList<>());
				for (String movie : movieList) {
					if (!movies.contains(movie) && res.size() < k) {
						res.add(movie);
						movies.add(movie);
					}
				}

				if (!userFollows.containsKey(current))
					continue;
				for (String follower : userFollows.get(current)) {
					q.add(follower);
				}
			}
			N--;
		}

		return res;
	}

output: [mvi1, mvi2]