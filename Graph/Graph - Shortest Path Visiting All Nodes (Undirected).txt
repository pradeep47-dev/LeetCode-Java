Shortest Path Visiting All Nodes

An undirected, connected graph of N nodes (labeled 0, 1, 2, ..., N-1) is given as graph.

graph.length = N, and j != i is in the list graph[i] exactly once, if and only if nodes i and j are connected.

Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.

Example 1:

Input: [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]

Example 2:

Input: [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]

/// using DFS Backtracking - Visiting all nodes

    public int shortestPathLength(int[][] graph) {
        if (graph == null || graph.length == 0) return -1;

        int res = 0, m = graph.length;
        for (int i = 0; i < m; i++) {
            boolean[] visited = new boolean[m];
            res = Math.max(res, dfs(i, graph, visited, 0));
            
            if (res == m - 1)
                return res;
        }
        return 2 * m - 2 - res;
    }
    
    public int dfs(int start, int[][] graph, boolean[] visited, int depth) {
        visited[start] = true;
        int res = depth;
        for (int to : graph[start]) {
            if (!visited[to]) {
                res = Math.max(res, dfs(to, graph, visited, depth + 1));
                if (res == graph.length - 1)
                    return res;
            }
        }
        visited[start] = false;
        return res;
    }
	

// Using BFS 


	public int shortestPathLength(int[][] graph) {
        if (graph == null || graph.length == 0) return -1;

            int m = graph.length;
            int[][] dp = new int[m][1 << m];

            Queue<State> queue = new LinkedList<>();
            for (int i = 0; i < m; i++)
            {
                Arrays.fill(dp[i], Integer.MAX_VALUE);
                dp[i][1 << i] = 0;
                queue.add(new State(1 << i, i));
            }

            while (queue.size() > 0)
            {
                State state = queue.poll();

                for (int next : graph[state.source])
                {
                    int nextMask = state.mask | 1 << next;
                    if (dp[next][nextMask] > dp[state.source][state.mask] + 1)
                    {
                        dp[next][nextMask] = dp[state.source][state.mask] + 1;
                        queue.add(new State(nextMask, next));
                    }
                }
            }

            int res = Integer.MAX_VALUE;
            for (int i = 0; i < m; i++)
            {
                res = Math.min(res, dp[i][(1 << m) - 1]);
            }
            return res;
    }
    
        class State
        {
            public int mask, source;
            public State(int m, int s)
            {
                mask = m;
                source = s;
            }
        }