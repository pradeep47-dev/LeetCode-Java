Connecting the special nodes - undirected graph - Jenny

Each of the connected components may have their own single source of water supply. 
One major rule water from different components must never be mixed together. 
install more pipes in each components so as to facilitate smooth circulation of water.
increase connections in each components by installing as much pipes as possible without breaking the rule. 
However connection of pipes is not easy and comes with a cost as well.

can connect cities within same components without any cost, only connecting cities within two different components 
requires a price that being the product of the respective sizes of their components.

Return how many extra pipes she has to add and minimum total cost of doing so.

Input Format:

    First line: Three integers N, M and K representing the number of nodes, number of edges and the number of main water supply points respectively.
    Next M lines: Two integers representing an undirected edge from the node u to node v.
    Next line: An empty line.
    Next line: K space-separated integers each representing the water supply node in a connected component..

Output Format

    Print the maximum number of new edges that can be added to the graph and the minimum cost of doing so.

Sample Input

12 7 2
1 2
1 3
4 5
4 6
5 7
9 10
11 12

1 4

Sample Output

32 28

The given graph consist of 5 connected components.
(1,2,3), (4,5,6,7), (8), (9,10), (11,12).
1 is the water supply point in (1,2,3) and 4 is the water supply point in (4,5,6,7).
There is no water supply point in (8), (9,10), (11,12).

For (1,2,3):-
We can add 1 edge from 2 to 3, cost = 0 (same component).

For (4,5,6,7):-
We will add 3 edges from 6 to 5, 6 to 7 and 4 to 7. Now we can't add more edges to this component, cost = 0 (same component).

For the remaining nodes (without water supply points):-
We will first connect (8) and with (11,12) cost 2 and 2 edges.
Then (8,11,12) and (9,10) with cost 6 and 6 edges. (product of their sizes).
Now we have all the non water supply points completely connected.
We can now connect all the 5 non water supply points to the component (4,5,6,7) with cost 20 and 20 edges.

Hence total cost is 28 and maximum number of edges that can be added are 32.


// Disjoint set - UnionFind

	public class UnionFind {
		public int count;
		public static int[] parent;
		public static long[] rank;
		
		public UnionFind(int n) {
			count = n;
			parent = new int[n+1];
			rank = new long[n+1];
        
			for(int i=0; i<n+1; i++) {
				parent[i] = i;
				rank[i] = 1;
			}
		}
		public static int find(int p){
			while (p != parent[p]) {
				parent[p] = parent[parent[p]];    // path compression by halving
				p = parent[p];
			}
			return p;
		}
		
		public static void union(int p,int q){		
			int rootP = find(p);
			int rootQ = find(q);
			if (rootP == rootQ) 
			return;				/// Connected Components
			
			if (rank[rootP] > rank[rootQ]) {	// To balance the tree
				parent[rootQ] = rootP;
			rank[rootP] += rank[rootQ];
			}
			else {
				parent[rootP] = rootQ;
				rank[rootQ] += rank[rootP];
			}
		}	
	}
	
	public void solve(int n, int m, int k, int[][] edges, int[] water_supply)
	{			
		UnionFind uf = UnionFind(n);
	
		for(int i=0; i<m; i++) {
			uf.union(edges[i][0], edges[i][1]);
		}
	    
        PriorityQueue<Long> pq = new PriorityQueue<>();	
		boolean[] visited = new boolean[n];
        
		for(int i=0; i<k; i++) {
			int x = uf.find(water_supply[i]);
			visited[x] = true;
		}
	
		long max = 0;	
		long total = 0;
	
		for(int i=0; i<n; i++)
		{
			if(uf.parent[i] == i)
			{
				total = total + ((uf.rank[i]*(uf.rank[i]-1))/2);
	
				if(visited[i])
					max = Math.max(max,uf.rank[i]);
				else
					pq.offer(uf.rank[i]);
			}
		}
	
		total = total - m;
	
		long curr_cost = 0;
	
		while(pq.size() > 1)
		{
			long temp1 = pq.poll();			
			long temp2 = pq.poll();
			
			pq.offer(temp1 + temp2);
	
			curr_cost += (temp1 * temp2);
		}
	
		long temp = pq.poll();
	
		curr_cost = curr_cost + (max * temp);
	
		System.out.println(curr_cost + total);
		System.out.println(curr_cost);
	}