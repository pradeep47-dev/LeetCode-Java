Best Position for a Service Centre

A delivery company wants to build a new service centre in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new centre in a position such that the sum of the euclidean distances to all customers is minimum.

Given an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers.

In other words, you need to choose the position of the service centre [xcentre, ycentre] such that the following formula is minimized:

Answers within 10^-5 of the actual value will be accepted.


Example 1:

Input: positions = [[0,1],[1,0],[1,2],[2,1]]
Output: 4.00000
Explanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.

Example 2:

Input: positions = [[1,1],[3,3]]
Output: 2.82843
Explanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843

Example 3:

Input: positions = [[1,1]]
Output: 0.00000

Example 4:

Input: positions = [[1,1],[0,0],[2,0]]
Output: 2.73205
Explanation: At the first glance, you may think that locating the centre at [1, 0] will achieve the minimum sum, but locating it at [1, 0] will make the sum of distances = 3.
Try to locate the centre at [1.0, 0.5773502711] you will see that the sum of distances is 2.73205.
Be careful with the precision!


// The math solution for this problem is to find the geometric median, using the Weiszfeld's algorithm. 

// We first find the best 10x10 square to put the service center in the 100x100 grid. 

// Then, find the best 1x1 square in the 30x30 grid (with 10x10 square from the previous step in the middle).

// Continue this process, dividing the grid size (delta) by 10 till it's smaller than 10^-5.


    public double getMinDistSum(int[][] positions) {
        double x = 0, y = 0;
        double result = Double.MAX_VALUE;
        double eps = 0.000001;
        double precision = 10;
        int[] dirs = new int[] { 0,1,0,-1,0 };
        
        while (precision > eps) {
            boolean found = false;
            
			// Calculate newx and newy, by moving "step" times in some direction
            for (int i=0; i < 4; i++) {
                double dx = x + dirs[i] * precision;
                double dy = y + dirs[i+1] * precision;
                
                double distance = calcDistanceSum(positions, dx, dy);
                
                if (distance < result) {
                    result = distance;
                    x = dx;
                    y = dy;
                    found = true;
                    break;
                }
            }
            
			// If (x,y) are not updated, move on to the next decimal place otherwise move with update x and y
            if (found == false)
                precision /= 2;
        }
        
        return result;
    }
    
    private double calcDistanceSum(int[][] positions, double x, double y) {
        double d = 0;
        
        for (int[] pos : positions) {
            d += Math.sqrt((pos[0]-x) * (pos[0]-x) + (pos[1]-y) * (pos[1]-y));
        }
        
        return d;
    }    

