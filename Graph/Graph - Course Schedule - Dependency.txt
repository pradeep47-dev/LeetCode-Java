Course Schedule 

There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

Example 2:

Input: 4, [[1,0],[2,0],[3,1],[3,2]]
Output: [0,1,2,3] or [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     
             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. 
             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .



// DFS - Backtracking

    int idx;
    public int[] findOrder(int n, int[][] pre) {
        if(pre == null) return new int[0];   
        idx = n-1;
        
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for(int[] p : pre) {
            
            graph.putIfAbsent(p[1], new ArrayList<>());
            graph.get(p[1]).add(p[0]);
        }
        
        int[] visited = new int[n];
        int[] result = new int[n];
        
        for(int i=0;i<n;i++) {
            if(visited[i] == 0 && !CanFinishDFS(graph, result, visited, i)) // check visited
                return new int[0];
        }        
               
        return result;
    }
    
    public boolean CanFinishDFS(Map<Integer, List<Integer>> graph, int[] result, int[] visited, int i) {
        if(visited[i] == -1) return false;
        if(visited[i] == 1) return true;
        
        visited[i] = -1;	// visited
        if(graph.containsKey(i)) {
            for(int val : graph.get(i)) {
                 if(!CanFinishDFS(graph, result, visited, val))
                        return false;
            }
        }
        visited[i] = 1;		// Done
        result[idx--] = i;
        return true;
    }
		
		

Course Schedule III

There are n different online courses numbered from 1 to n. Each course has some duration(course length) t and closed on dth day. A course should be taken continuously for t days and must be finished before or on the dth day. You will start at the 1st day.

Given n online courses represented by pairs (t,d), your task is to find the maximal number of courses that can be taken.

Example:

Input: [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]
Output: 3


	public int ScheduleCourse(int[][] courses) {
       
		Array.Sort(courses, (a, b) -> a[1] - b[1]);
		int time = 0, count = 0;
		for (int i = 0; i < courses.Length; i++)
		{
			if (time + courses[i][0] <= courses[i][1])
			{
				time += courses[i][0];
				courses[count++] = courses[i];
			}
			else
			{
				int max_i = i;
				for (int j = 0; j < count; j++)
				{
					if (courses[j][0] > courses[max_i][0])
						max_i = j;
				}
				if (courses[max_i][0] > courses[i][0])
				{
					time += courses[i][0] - courses[max_i][0];
					courses[max_i] = courses[i];
				}
			}
		}
		return count;
    }