Clone Graph

Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors. 

Example:

Input:
{"$id":"1","neighbors":[{"$id":"2","neighbors":[{"$ref":"1"},{"$id":"3","neighbors":[{"$ref":"2"},{"$id":"4","neighbors":[{"$ref":"3"},{"$ref":"1"}],"val":4}],"val":3}],"val":2},{"$ref":"4"}],"val":1}

Explanation:
Node 1's value is 1, and it has two neighbors: Node 2 and 4.
Node 2's value is 2, and it has two neighbors: Node 1 and 3.
Node 3's value is 3, and it has two neighbors: Node 2 and 4.
Node 4's value is 4, and it has two neighbors: Node 1 and 3.


/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> neighbors;

    public Node(){}
    public Node(int _val,IList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
}
*/

// Recursive

    
    private HashMap<Node, Node> visited = new HashMap<>();
    
    public Node cloneGraph(Node node) {
          if (node == null) return null;        
       
        if (visited.containsKey(node)) {
            return visited.get(node);
        }
       
        Node cloneNode = new Node(node.val, new ArrayList<>());        
        visited.put(node, cloneNode);
        
        for (Node neighbor : node.neighbors) {
            cloneNode.neighbors.add(cloneGraph(neighbor));
        }

        return cloneNode; 
    }


// Iterative

	public Node cloneGraph(Node node) {
        if(node==null)return node;
        Queue<Node> q = new LinkedList<Node>();
        HashMap<Node,Node> map = new HashMap<>();
		
        q.add(node);
        map.put(node, new Node(node.val,new ArrayList<>()));
		
        while(!q.isEmpty())
        {
            Node temp = q.poll();
            Iterator<Node> it = temp.neighbors.listIterator();
            while(it.hasNext())
            {   Node n= it.next();
                if(!map.containsKey(n))
				{ 
                   map.put(n, new Node(n.val,new ArrayList<>()));
                   q.add(n);
                }
				
                map.get(temp).neighbors.add(map.get(n));                
            }
        }
        
        return map.get(node);
    }