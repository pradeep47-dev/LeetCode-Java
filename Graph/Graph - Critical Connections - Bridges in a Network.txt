Critical Connections in a Network

There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.

Example 1:

Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.


// Find bridges - undirected graph
// Implement using Tarjan Algorithm 
// DFS to travel through the graph to find if current vertex u, can travel back to u or previous vertex
// low[u] records the lowest vertex u can reach
// visited[u] records the time when u was visited

	public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
		
		List<Integer>[] graph = new ArrayList[n];
		List<List<Integer>> res = new ArrayList<>();
		
		for (int i = 0; i < n; i++) {
			graph[i] = new ArrayList<>();
		}
		
		for (int i = 0; i < connections.size(); i++) {	// build graph
			int u = connections.get(i).get(0);
			int v = connections.get(i).get(1);
			graph[u].add(v);
			graph[v].add(u);
		}	
		
		int[] visited = new int[n];
		int[] low = new int[n];	
		
		dfs(0, low, visited, graph, res, -1);
			
		return res;
	}
	
	int time = 1; // time when visited each vertex
	
	private void dfs(int u, int[] low, int[] visited, List<Integer>[] graph, List<List<Integer>> res, int parent) {
		visited[u] = low[u] = time++; // visited u
		
		for (int v : graph[u]) {
			
			if (v == parent) continue; // if parent vertex, ignore
			
			if (visited[v] == 0) { 
				dfs(v, low, visited, graph, res, u);
				low[u] = Math.min(low[u], low[v]);
				if (visited[u] < low[v]) {					
					res.add(Arrays.asList(u, v)); // u - v is critical, there is no path for v to reach back to u
				}
			} else { // if v discovered, update low[u], cannot use low[v] because u is not subtree of v
				low[u] = Math.min(low[u], visited[v]);
			}
		}
	}

	DFS time complexity is O(|E| + |V|), attempting to visit each edge at most twice. graph is always a connected graph, |E| >= |V|.

	time complexity = O(|E|).

	Space complexity = O(graph) + O(low) + O(connections) = 3 * O(|E| + |V|) = O(|E|).