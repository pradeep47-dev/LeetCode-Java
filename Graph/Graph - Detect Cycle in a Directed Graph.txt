Detect Cycle in a Directed Graph

Given a directed graph, check whether the graph contains a cycle or not. Your function should return true if the given graph contains at least one cycle, else return false.

Example,

Input: n = 4, e = 6
0 -> 1, 0 -> 2, 1 -> 2, 2 -> 0, 2 -> 3, 3 -> 3
Output: Yes
Explanation:
Diagram:

The diagram clearly shows a cycle 0 -> 2 -> 0


// DFS Backtrack

		Graph graph = new Graph(4); 
        graph.addEdge(0, 1); 
        graph.addEdge(0, 2); 
        graph.addEdge(1, 2); 
        graph.addEdge(2, 0); 
        graph.addEdge(2, 3); 
        graph.addEdge(3, 3); 

	private final int V; 
    private final List<List<Integer>> adj; 
  
    public Graph(int V)  
    { 
        this.V = V; 
        adj = new ArrayList<>(V); 
          
        for (int i = 0; i < V; i++) 
            adj.add(new LinkedList<>()); 
    } 
      
     private void addEdge(int source, int dest) { 
        adj.get(source).add(dest); 
    } 
  
   
    private boolean isCyclic()  
    {     
        boolean[] visited = new boolean[V]; 
        boolean[] recStack = new boolean[V];
       
        for (int i = 0; i < V; i++) 
            if (isCyclicUtil(i, visited, recStack)) 
					return true; 
  
        return false; 
    } 
	
    private boolean isCyclicUtil(int i, boolean[] visited, boolean[] recStack)  
    {     
        if (recStack[i]) 
            return true; 
  
        if (visited[i]) 
            return false; 
              
        visited[i] = true;   
        recStack[i] = true; 
                 
        for (Integer c: adj.get(i)) 
            if (isCyclicUtil(c, visited, recStack)) 
                return true; 
                  
        recStack[i] = false; 
  
        return false; 
    } 
  
  