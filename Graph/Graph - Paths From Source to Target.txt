All Paths From Source to Target

Given a directed acyclic graph of N nodes. Find all possible paths from node 0 to node N-1, and return them in any order.

The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.
 
Example 1:

Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

Example 2:

Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]

Example 4:

Input: graph = [[1,2,3],[2],[3],[]]
Output: [[0,1,2,3],[0,2,3],[0,3]]


// DFS - Backtacking

	public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> result = new ArrayList<>();      
        List<Integer> list = new ArrayList<>();
        list.add(0);
        
        DFS(result, list, graph, 0);
        return result;
    }
    
    public void DFS(List<List<Integer>> result, List<Integer> list, int[][] graph, int i) {
        if(i == graph.length - 1) {           
            result.add(new ArrayList<>(list));
            return;
        }        
        
        for(int idx : graph[i]) {
            list.add(idx);
            DFS(result, list, graph, idx);
            list.remove(list.size() - 1);
        }
    }

