 Kth Smallest Element in a BST

Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1

Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3


// Iterative

	public int KthSmallest(TreeNode root, int k) {
		
        Stack<TreeNode> stack = new Stack<TreeNode>();
        
        while(true) {
            while(root != null){
                stack.push(root);
                root = root.left;                
            }
            
            root = stack.pop();
            if(--k == 0) return root.val;
            root = root.right;
        }
    }
    
 // Recursive    
  
	List<int> arr = Inorder(root, new List<int>());  
    return arr[k-1];
	
    public List<int> Inorder(TreeNode root, List<int> arr) {
        
        if(root == null) return arr;
        Inorder(root.left, arr);
        arr.add(root.val);
        Inorder(root.right, arr);
        return arr;
    }