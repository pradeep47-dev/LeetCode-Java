Unique Binary Search Trees

Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3


// Dynammic Programming - dp[k] represents the number of BST trees built from 1....k

// number of the first 4 trees will always be dp[1] = 1 ,dp[2] =2 ,dp[3] = 5, dp[4] =14 

// to build a tree, we need to pick a root node, then we need to know how many possible left sub trees and 
	right sub trees can be held under that node, finally multiply them.

	public int numTrees(int n) {
        int[] dp = new int[n+1];
        dp[0] = dp[1] = 1;
        
        for(int level = 2; level <= n; level++) {
            for(int root = 1; root <= level; root++) {
                dp[level] += dp[level-root] * dp[root-1];
            }
        }
        return dp[n];
    }
	
To build a tree contains {1,2,3,4,5}. First we pick 1 as root, for the left sub tree, there are none; 
for the right sub tree, we need count how many possible trees are there constructed from {2,3,4,5}, 
apparently it's the same number as {1,2,3,4}. So the total number of trees under "1" picked as root is dp[0] * dp[4] = 14. 
(assume dp[0] =1). Similarly, root 2 has dp[1]*dp[3] = 5 trees. root 3 has dp[2]*dp[2] = 4, root 4 has dp[3]*dp[1]= 5 and
root 5 has dp[0]*dp[4] = 14. Finally sum the up and it's done.

	
	
// Retrun the BST Trees

Example: 

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]

// Recursion - Post Order

	public List<TreeNode> generateTrees(int n) {
        if(n == 0) return new ArrayList<>();
        return genTreeList(1, n);        
    }
    
    public List<TreeNode> genTreeList(int start, int end) {
        List<TreeNode> result = new ArrayList<>();
        if(start > end) {
            result.add(null);
        }
        for(int i=start;i<=end;i++) {
            List<TreeNode> leftList = genTreeList(start, i-1);
            List<TreeNode> rightList = genTreeList(i+1, end);
            for(TreeNode left : leftList) {
                for(TreeNode right : rightList) {
                    TreeNode root = new TreeNode(i);
                    root.left = left;
                    root.right = right;
                    result.add(root);
                }
            }
        }
        return result;
    }

// with memoization

	Map<Integer, List<TreeNode>> memo = new HashMap();
	 
	public List<TreeNode> allBinaryTrees(int n) {
		if (!memo.containsKey(n)) {
			List<TreeNode> result = new ArrayList<>();
			if (n == 1) {		
				result.add(new TreeNode(n));				
			} else {			
				for (int i = 1; i < n - 1; i++) {
					List<TreeNode> leftList = allBinaryTrees(i);
					List<TreeNode> rightList = allBinaryTrees(n - i);
					for(TreeNode left : leftList) {
						for(TreeNode right : rightList) {
							TreeNode root = new TreeNode(i);
							root.left = left;
							root.right = right;
							result.add(root);
						}
					}
				}
			}
			memo.put(n, result);
		}
		return memo.get(n);
	}