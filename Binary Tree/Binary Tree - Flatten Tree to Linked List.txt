Flatten Binary Tree to Linked List

Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6

The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6




// Recursive 1
    
    private TreeNode flatten(TreeNode node){
        if(node == null)
            return null;
        TreeNode left = flatten(node.left);
        TreeNode right = flatten(node.right);
        
        if(left != null){
            left.right = node.right;
            node.right = node.left;
            node.left = null;
        }
        if(right != null) return right;
        else if(node.right != null) return left;
        else return node;
    }
	
	
// Recursive 2


    public TreeNode prev = null;
    
    public void flatten(TreeNode root) {
        if(root == null) return;
        
        flatten(root.right);
        flatten(root.left);
        root.right = prev;
        root.left = null;
        prev = root;
    }


// iterative

	public void flatten(TreeNode root) {
		TreeNode cur = root;
		while (cur != null) {
			if (cur.left != null) {
				TreeNode last = cur.left;
				while (last.right != null) 
					last = last.right;
					
				last.right = cur.right;
				cur.right = cur.left;
				cur.left = null;
			}
			cur = cur.right;
		}
	}