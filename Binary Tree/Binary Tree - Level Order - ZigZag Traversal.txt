Binary Tree Level Order Traversal

Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its level order traversal as:

[
  [3],
  [9,20],
  [15,7]
]

// bottom-up level order 

[
  [15,7],
  [9,20],
  [3]
]

// Iterative - BFS

	public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) return result;
        
        Queue<TreeNode> que = new LinkedList<>();
        que.add(root);
        int lvl = 0;
		
        while(!que.isEmpty()) {
            List<Integer> list = new ArrayList<>();
            int size = que.size();
            for(int i=0;i<size;i++) {
                TreeNode node = que.poll();
                
				if(lvl % 2 ==0) list.add(node.val);
                else list.add(0, node.val);
                
                if(node.left != null) que.add(node.left);
                if(node.right != null) que.add(node.right);
            } 
            result.add(list);
			lvl++;
			
			// Bottom up - result.add(0, list);
        }
        return result;
    }


// Recursive - DFS

	public List<List<Integer>> LevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        LevelOrderTraversal(root,result,0);
        return result;
    }
    
    public void LevelOrderTraversal(TreeNode root, List<List<Integer>> result, int lvl)
    {
        if(root == null) return;
        		
        result.putIfAbsent(lvl, new ArrayList<int>());
        result.get(lvl).add(root.val);
		
		// ZigZag
		if(lvl%2 == 0) result.get(lvl).add(root.val);
        else result.get(lvl).add(0, root.val);
		
		// Bottom up
		if(lvl >= result.size())
            result.add(0, new ArrayList<>());        
        result.get(result.size() - lvl - 1).add(root.val);
        
        LevelOrderTraversal(root.left, result, lvl+1);
        LevelOrderTraversal(root.right, result, lvl+1);
    }