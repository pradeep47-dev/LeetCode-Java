Balance a Binary Search Tree

Given a binary search tree, return a balanced binary search tree with the same node values.

A binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1.
 
Example 1:

Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2,null,null] is also correct.


// Check if it is Balanced or Not

	public boolean isBalanced(TreeNode root) {       
        return height(root) != -1;
    }
    
    public int height(TreeNode root) {
        if(root == null) return 0;
        
        int left = height(root.left);
        if (left == -1) return -1;
		
        int right = height(root.right);
        if (right == -1) return -1;
		
        if (Math.abs(left - right) > 1)  return -1;
        return 1 + Math.max(left, right);
    }
	
	
// Convert to list and form BST

    List<TreeNode> list = new ArrayList<>();
    public TreeNode balanceBST(TreeNode root) {
        Inorder(root);
        return ConvertToTree(0, list.size() -1);
    }
    
    public void Inorder(TreeNode root) {
        if(root == null) return;
        
        Inorder(root.left);
        list.add(root);
        Inorder(root.right);
    }
    
    public TreeNode ConvertToTree(int start, int end) {
        if(start > end) return null;
        
        int mid = start + (end-start) / 2;
        TreeNode root = list.get(mid);
        root.left = ConvertToTree(start, mid-1);
        root.right = ConvertToTree(mid+1, end);
        return root;
    }



// Day–Stout–Warren algorithm - Constant space solution

O(n) - O(1)
Algorithm

    Convert the tree into a vine, count the total number of nodes in tree.
	By doing right rotations, we flatten a tree into a 'linked list'.
    
    Calculate the height of the closest perfectly balanced tree: h = log2(cnt + 1).
    Calculate the number of nodes in the closest perfectly balanced tree: m = pow(2, h) - 1.
    
	Left-rotate cnt - m nodes to cover up the excess of nodes.

    Note: you rotate the root node, then you rotate the right child of the new root node, and so on. In other words, left rotations are performed on every second node of the vine.

    Left-rotate m / 2 nodes.
    Divide m by two and repeat the step above while m / 2 is greater than zero.


	public TreeNode balanceBST(TreeNode root) {
		TreeNode node = new TreeNode(0);
		node.right = root;
		
		int cnt = makeVine(node);
		int m = (int)Math.pow(2, (int)(Math.log(cnt + 1) / Math.log(2))) - 1;
		compress(node, cnt - m);
		
		for (m = m / 2; m > 0; m /= 2)
			compress(node, m);
		return node.right;
	}
	
	public int makeVine(TreeNode node) {
		int cnt = 0;
		TreeNode n = node.right;
		while (n != null) {
			if (n.left != null) {
				TreeNode old_n = n;
				n = n.left;
				old_n.left = n.right;
				n.right = old_n;
				node.right = n;
			}
			else {      
				cnt++;
				node = n;
				n = n.right;
			}
		}
		return cnt;
	}
	
	public void compress(TreeNode node, int m) {
		TreeNode n = node.right;
		while (m > 0) {
			TreeNode old_n = n;
			n = n.right;
			node.right = n;
			old_n.right = n.left;
			n.left = old_n;
			node = n;
			n = n.right;
			
			m--;
		}
	}    
