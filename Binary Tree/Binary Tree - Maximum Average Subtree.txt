Maximum Average Subtree - Highest Tenure

Given the root of a binary tree, find the maximum average value of any subtree of that tree.

(A subtree of a tree is any node of that tree plus all its descendants. The average value of a tree is the sum of its values, divided by the number of nodes.)

 
Example 1:

Input: [5,6,1]
Output: 6.00000
Explanation: 
For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.
For the node with value = 6 we have an average of 6 / 1 = 6.
For the node with value = 1 we have an average of 1 / 1 = 1.
So the answer is 6 which is the maximum.


// PostOrder DFS traversal
	
	public double maximumAverageSubtree(TreeNode root) {
         return PostOrder(root)[2];
    }
    
    public double[] PostOrder(TreeNode root)
    {
        if(root == null) return new double[] {0,0,0};
        
        double[] left = PostOrder(root.left);
        double[] right = PostOrder(root.right);
        
        double sum = root.val + left[0] + right[0];
        double count = 1 + left[1] + right[1];
        double average = Math.max(left[2], right[2]);
        
        double MaxAverage = Math.max(average, 1.0 * sum / count);
        
        return new double[] { sum, count, MaxAverage};
    }
	
	Time - Linear time O(n)
	space - O(1) Constant
	
	
// Using a Node

	public class MaxNode {
		double sum;
		double count;
		double average;
		TreeNode node;
		
		public MaxNode(double sum, double numNodes, double maxAve, TreeNode node) {
			this.sum = sum;
			this.count = numNodes;
			this.average = maxAve;
			this.node = node;
		}
	}

    public double MaximumAverageSubtree(TreeNode root) {        
        if (root == null) return null;        
         
        MaxNode ans = PostOrder(root);
         
        return ans.node;  // or ans.average for value
    }
    
    public MaxNode PostOrder(TreeNode root)
    {
        if(root == null) return new double[] {0,0,0};
        
        MaxNode left = PostOrder(root.left);
        MaxNode right = PostOrder(root.right);
        
        double sum = root.val + left.sum + right.sum;
        double count = left.count + right.count + 1;
        double average = sum / count;
		
        TreeNode node = null;
        if (average > left.average && ave > right.average) {
            node = root;
        } else if (left.average > average && left.average > right.average) {
            average = left.average;
            node = left.node;
        }  else {
            average = right.average;
            node = right.node;
        }
        
        return new MaxNode(sum, count, average, node};
    }	


// N-ary tree

	double max = Integer.MIN_VALUE;
	TreeNode maxNode = null;
	
	public TreeNode maximumAverageSubtree(TreeNode root) {
		if (root == null) return null;
		helper(root);
		return maxNode;
	}
	
	private double[] helper(TreeNode root) {
		if (root == null) return new double[] {0, 0};
	
		double curTotal = root.val;
		double count = 1;
		for (TreeNode child : root.children) {
			double[] cur = helper(child);
			curTotal += cur[0];
			count += cur[1];
		}        
		double avg = curTotal / count;
		if (count > 1 && avg > max) { //taking "at least 1 child" into account
			max = avg;
			maxNode = root;
		}
		return new double[] {curTotal, count};
	}