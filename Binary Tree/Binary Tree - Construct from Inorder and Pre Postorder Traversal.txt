Construct Binary Tree from Inorder and Postorder Traversal

Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]

Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7


// DFS using inorder hashMap

	public int post_idx = 0, pre_idx = 0;
    public HashMap<Integer, Integer> inorderMap = new HashMap<>();
    
    public TreeNode BuildTree(int[] inorder, int[] postorder) {
        
        int n = inorder.length;
        
        for(int i=0;i<n;i++)
        {
             inorderMap.put(inorder[i], i);
        }
        post_idx = n-1;
		
		// return preorderDFS(0, n, preorder);    
        return postorderDFS(0, n-1, postorder);            
    }

// PreOrder
 
	public TreeNode preorderDFS(int in_start,int in_end, int[] preorder)
    {
        if(in_start >= in_end)
            return null;
        
        int val = preorder[pre_idx];
        TreeNode node = new TreeNode(val);
        
        int index = inorderMap.get(val);
        
        pre_idx++;
        
        node.left = preorderDFS(in_start,index,preorder);
        node.right = preorderDFS(index+1,in_end,preorder);
        return node;
    }

// Post Order

	public TreeNode postorderDFS(int start, int end, int[] postorder) {
        if(start > end) return null;
        
        int val = postorder[post_idx];
        post_idx--;
        
        TreeNode root = new TreeNode(val);
        int index = inorderMap.get(val);
        
        root.right = postorderDFS(index + 1, end, postorder);
        root.left = postorderDFS(start, index-1, postorder);
        return root;        
    }
}