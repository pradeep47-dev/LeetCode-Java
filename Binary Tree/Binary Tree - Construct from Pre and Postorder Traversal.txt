Construct Binary Tree from Preorder and Postorder Traversal

Return any binary tree that matches the given preorder and postorder traversals.

Values in the traversals pre and post are distinct positive integers.


Example 1:

Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]


// Recursive

	int preIndex = 0, posIndex = 0;
    
    public TreeNode constructFromPrePost(int[] pre, int[] post) {
        TreeNode root = new TreeNode(pre[preIndex++]);
        if (root.val != post[posIndex])
            root.left = constructFromPrePost(pre, post);
        if (root.val != post[posIndex])
            root.right = constructFromPrePost(pre, post);
        posIndex++;
        return root;
    }   

// Iterative using Deque
    
    public TreeNode constructFromPrePost(int[] pre, int[] post) {
        Deque<TreeNode> dq = new ArrayDeque<>();
        dq.offer(new TreeNode(pre[0]));
		
        for (int i = 1, j = 0; i < pre.length; ++i) {
            TreeNode node = new TreeNode(pre[i]);
            while (dq.getLast().val == post[j]) {
                dq.pollLast(); j++;
            }
			
            if (dq.getLast().left == null) 
				dq.getLast().left = node;
            else 
				dq.getLast().right = node;
				
            dq.offer(node);
        }
        return dq.getFirst();
    }