Delete Nodes And Return tree

Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a tree (a disjoint union of trees).

Return the roots of the trees in the remaining tree.  You may return the result in any order.
 

Example 1:

Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]


// preOrder traversal


	Set<Integer> to_delete;
    List<TreeNode> res;
	
    public List<TreeNode> delNodes(TreeNode root, int[] todelete) {
        to_delete = new HashSet<>(Arrays.asList(todelete));
        res = new ArrayList<>();
       
        helper(root, true);
        return res;
    }

    private TreeNode helper(TreeNode node, boolean is_root) {
        if (node == null) return null;
        boolean deleted = to_delete.contains(node.val);
		
        if (is_root && !deleted) 
			res.add(node);
		
        node.left = helper(node.left, deleted);
        node.right =  helper(node.right, deleted);
        return deleted ? null : node;
    }