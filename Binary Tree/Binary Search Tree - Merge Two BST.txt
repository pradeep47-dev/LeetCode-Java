Add Two BST

	// return node - Recursion
	
	public TreeNode MergeTrees(TreeNode t1, TreeNode t2) {
        
        if(t1 == null) return t2;
        if(t2 == null) return t1;
        
        t1.val += t2.val;
        t1.left = MergeTrees(t1.left,t2.left);
        t1.right = MergeTrees(t1.right,t2.right);
        return t1;
    }


Return all elements in Two Binary Search Trees

Given two binary search trees root1 and root2.
Return a list containing all the integers from both trees sorted in ascending order.
 
Example 1:

Input: root1 = [2,1,4], root2 = [1,0,3]
Output: [0,1,1,2,3,4]

Example 2:

Input: root1 = [0,-10,10], root2 = [5,1,7,0,2]
Output: [-10,0,0,1,2,5,7,10]

	
// Inorder Traversal

	 public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        List<Integer> result1 = new ArrayList<>();      
        InOrder(root1, result1);  
		
        List<Integer> result2 = new ArrayList<>();
        InOrder(root2, result2); 
		
        List<Integer> result = helper(result1, result2);
		return ListToBST(result, 0, result.size()-1);
    }
    
    public List<Integer> helper(List<Integer> l1, List<Integer> l2) {
        List<Integer> result = new ArrayList<>();
        int i=0, j=0, m = l1.size(), n = l2.size();
        while(i < m && j < n) {
            if(l1.get(i) < l2.get(j)) result.add(l1.get(i++));
            else result.add(l2.get(j++));
        }
        
        while(i<m) result.add(l1.get(i++));
        while(j<n) result.add(l2.get(j++));
        return result;
    }
    
    public void InOrder(TreeNode root, List<Integer> result) {
        if(root == null) return;
        InOrder(root.left, result);
        result.add(root.val);
        InOrder(root.right, result);
    }
	
	public  Node ListToBST(List<int> list, int start, int end)
    {           
        if (start > end) return null;            
                       
        int mid = (start + end) / 2;
        Node node = new Node(list[mid]);        
        node.left = ListToBST(list, start, mid - 1);        
        node.right = ListToBST(list, mid + 1, end);
        return node;
    }
		
		
// Using Stack

	public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        Stack<TreeNode> stack1 = new Stack<>(), stack2 = new Stack<>();
		List<Integer> output = new ArrayList<>();

		while (root1 != null || root2 != null || !stack1.isEmpty() || !stack2.isEmpty()) {			
			
            while (root1 != null) {
				stack1.push(root1);
				root1 = root1.left;
			}
			while (root2 != null) {
				stack2.push(root2);
				root2 = root2.left;
			}

			
			if (stack2.isEmpty() || !stack1.isEmpty() && stack1.peek().val <= stack2.peek().val) {
				root1 = stack1.pop();
				output.add(root1.val);
				root1 = root1.right;
			}
			else {
				root2 = stack2.pop();
				output.add(root2.val);
				root2 = root2.right;
			}
		}
		
		return output;
    }