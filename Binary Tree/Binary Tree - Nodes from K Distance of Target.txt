All Nodes Distance K in Binary Tree

We are given a binary tree with root node, a target node, and an integer value K.

Return a list of the values of all nodes that have a distance K from the target node.  
 
Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2

      3
    /   \
   5     1
   \    / \
    2  0   8
   / \
  7   4
Output: [7,4,1]

Explanation: 
The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.


// dfs - filter based on distance

 * If the distance from a node to target node is k, the distance from its child to the target node is k + 1
 * unless the child node is closer to the target node which means the target node is in it's subtree.

 * To avoid this situation, we need to travel the tree first to find the path from root to target
 * store the value of distance in hashamp from the all nodes in that path to target

 * Then we can easily use dfs to travel the whole tree. Every time when we meet a treenode which has already stored in map,
	use the stored value in hashmap instead of the value from its parent node.



	 public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        List<Integer> result = new ArrayList<>();
        dfs(root, target, result, 1, K);
        return result;
    }

    private int dfs(TreeNode node, TreeNode target, List<Integer> result, int level, int K) {
        if (node == null) {
            return -1;
        }

        if (node == target) {
            AddNodes(node, result, K);
            return level;
        }

        int left = dfs(node.left, target, result, level + 1, K);
        int right = dfs(node.right, target, result, level + 1, K);

        if (left == -1 && right == -1) {
            return -1;
        }

        int targetLevel = left == -1 ? right : left;
        int distance = K - (targetLevel - level);
        if (distance == 0) {
            result.add(node.val);
        } else {
            TreeNode nodeToSearch = left == -1 ? node.left : node.right;
            AddNodes(nodeToSearch, result, distance - 1);
        }

        return targetLevel;

    }

    private void AddNodes(TreeNode node, List<Integer> result, int distance) {
        if (node == null || distance < 0) {
            return;
        }

        if (distance == 0) {
            result.add(node.val);
            return;
        }

        AddNodes(node.left, result, distance - 1);
        AddNodes(node.right, result, distance - 1);
    }
	

Time - O(N), where N is the number of nodes in tree
space - O(n) 