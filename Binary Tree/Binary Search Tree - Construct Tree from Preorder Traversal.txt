Construct Binary Search Tree from Preorder Traversal

Return the root node of a binary search tree that matches the given preorder traversal.

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
 

// Recursive - Preorder

    public int index=0;
	
    public TreeNode bstFromPreorder(int[] preorder ) {
	
        return fromPreorder(preorder, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    public TreeNode fromPreorder(int[] preorder, int min, int max ) {
        if(preorder == null || index >= preorder.length)
            return null;
			
        TreeNode node = null;
        if(preorder[index] > min && preorder[index] < max){
            node = new TreeNode(preorder[index]);
            index++;
            node.left = fromPreorder(preorder, min, node.val);
            node.right = fromPreorder(preorder, node.val, max);
        }
        return node;
    }
	

// Iterative - Using Stack

	public TreeNode bstFromPreorder(int[] preorder) {
        TreeNode root = new TreeNode(preorder[0]);
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        
        for(int i=1;i<preorder.length;i++) {            
            int val = preorder[i];
            TreeNode node = new TreeNode(val);
            
            if(val < stack.peek().val) {
                stack.peek().left = node;
            }
            else {
                TreeNode parent = stack.peek();
                while(!stack.isEmpty() && val > stack.peek().val)
                    parent = stack.pop();
                parent.right = node;
            }
            stack.push(node);
        }
        return root;
    }   