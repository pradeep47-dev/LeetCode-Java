Binary Tree Longest Consecutive Sequence

Given a binary tree, find the length of the longest consecutive sequence path.

The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).

Example 1:

Input:

   1
    \
     3
    / \
   2   4
        \
         5

Output: 3

Explanation: Longest consecutive sequence path is 3-4-5, so return 3.

public class Solution {
    public int Maxvalue = 0;
    
    public int LongestConsecutive(TreeNode root) {
        if(root == null) return 0;
        PreOrderDFS(root, 0, root.val);
        return Maxvalue;
    }
    
    public void PreOrderDFS(TreeNode root, int cur, int target)
    {
        if(root == null) return;
        
        if(root.val == target) cur++;
        else cur = 1;
        
        Maxvalue = Math.Max(cur, Maxvalue);
        PreOrderDFS(root.left, cur, root.val + 1);
        PreOrderDFS(root.right, cur, root.val + 1);
    }
}


Binary Tree Longest Consecutive Sequence - Increasing or decreasing

Given a binary tree, you need to find the length of Longest Consecutive Path in Binary Tree.

Especially, this path can be either increasing or decreasing. For example, [1,2,3,4] and [4,3,2,1] are both considered valid, but the path [1,2,4,3] is not valid. On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.

Example 1:

Input:
        1
       / \
      2   3
Output: 2
Explanation: The longest consecutive path is [1, 2] or [2, 1].
 

Example 2:

Input:
        2
       / \
      1   3
Output: 3
Explanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1].


public class Solution {
    public int Maxvalue = 0;
    
    public int LongestConsecutive(TreeNode root) {
        if(root == null) return 0;
        longestPath(root);
        return Maxvalue;
    }
    
    public int[] longestPath(TreeNode root) {
        if (root == null) return new int[] {0,0};
        int dcr = 1, inr = 1;
        if (root.left != null) {
            int[] left = longestPath(root.left);
            if (root.val == root.left.val - 1)
                inr = left[0] + 1;
            else if (root.val == root.left.val + 1)
                dcr = left[1] + 1;
        }
        if (root.right != null) {
            int[] right = longestPath(root.right);
            if (root.val == root.right.val - 1)
                inr = Math.Max(inr, right[0] + 1);
            else if (root.val == root.right.val + 1)
                dcr = Math.Max(dcr, right[1] + 1);
        }
        Maxvalue = Math.Max(Maxvalue, dcr + inr - 1);
        return new int[] {inr, dcr};
    }
}
