Rotate String

We are given two strings, A and B.

A shift on A consists of taking string A and moving the leftmost character to the rightmost position. 
For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. Return True if and only if A can become B after some number of shifts on A.

Example 1:
Input: A = 'abcde', B = 'cdeab'
Output: true

Example 2:
Input: A = 'abcde', B = 'abced'
Output: false


// KMP (Knuth-Morris-Pratt) - Pattern Search algorithm

	public boolean rotateString(String A, String B) {
        int m = A.length();
        int n = B.length();
        if(m != n) return false;
        if(m == 0) return true;
        
        int[] lps = computeLPSArray(B.toCharArray(), n);
        
        int i = 0, j =0;
        
        A = A + A;
        while(i < 2*m) {
            if(A.charAt(i) == B.charAt(j)) {
                i++;
                j++;
            }
            if(j == n) {
                return true;
				
				System.out.println("Found pattern at index " + (i - j)); 
                j = lps[j - 1]; 
            }
            else if(i < 2*m && A.charAt(i) != B.charAt(j)) {
                if(j!=0) {
                    j = lps[j-1];		// set value if its not zero
                }
                else 
                    i++;
            }
        }
        return false;
    }
    
// longest prefix suffix array

    public int[] computeLPSArray(char[] p, int n) {
		int[] lps = new int[n];
        int len = 0;
        int i = 1;
        
        while(i < n) {
            if(p[i] == p[len]) {              
                len++;
                lps[i] = len;
                i++;            
            }
            else {
                if(len != 0) {				// set value if its not zero
                    len = lps[len -1];
                }
                else {
                    lps[i] = len;
                    i++;
                }
            }
        }
		return lps;
    }
	

/// second method
	
	public boolean rotateString(String A, String B) {
        int m = A.length();
        int n = B.length();
        if(m != n) return false;
        
        int i = 0, j = 0, k = 0;
        
        while(j < n) {
            k = j;
            while(k < n && B.charAt(k) == A.charAt(i)) {
                i++;
                k++;
            }
            
            if(k == n) {
                j = k;
                break;
            }
            i = 0;
            j++;
        }
        
        if(i == m) return true; // No Rotation;
        j=0;
        while(i<m) {
            if(A.charAt(i++) != B.charAt(j++))
                return false;
        }
        return true;
    }