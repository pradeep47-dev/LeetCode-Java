Edit Distance

Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

    Insert a character
    Delete a character
    Replace a character

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

// Dynammic Programming 
// check all characters of A with B and update the distance
// Min of insert, replace or remove operations

	public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        
        int[][] distance = new int[m+1][n+1];
        for(int i=0;i<=m;i++) 
            distance[i][0] = i;  // assign row index
        
        for(int i=0;i<=n;i++)
            distance[0][i] = i;	// assign column index
        
        for(int i=1;i<=m;i++) {            
            for(int j=1;j<=n;j++) {
                if(word1.charAt(i-1) == word2.charAt(j-1))
                    distance[i][j] = distance[i-1][j-1];		// if both chars are same, add prev distance
                else
                    distance[i][j] = 1 + Math.min(distance[i-1][j-1], Math.min(distance[i][j-1], distance[i-1][j]));
					
										// else distance is replace or insert or delete operations
            }            
        }
        return distance[m][n];
    }