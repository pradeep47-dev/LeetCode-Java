Permutation in String

Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
	

    public boolean checkInclusion(String s1, String s2) {
   
        int l1 = s1.length(), l2 = s2.length();
        
        if(l1 == 0) return true;
        else if(l1>l2) return false;
        
        int[] chars = new int[26];
        
        for(int i=0;i<l1;i++)
        {
            chars[s1.charAt(i) - 'a']++;
            chars[s2.charAt(i) - 'a']--;
        }
        
        if(AllZeros(chars)) return true;
        
        for(int i=l1; i < l2; i++)
        {
            chars[s2.charAt(i) - 'a']--;
            chars[s2.charAt(i - l1) - 'a']++;
            if(AllZeros(chars)) return true;
        }
       return false;
    }
    
    public boolean AllZeros(int[] chars)
    {
        for(int i=0;i<chars.length;i++)
        {
            if(chars[i]!=0)
                return false;
        }
        return true;
    }


