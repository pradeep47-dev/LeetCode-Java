Find All Anagrams in a String

Given a string s and string p, find all the start indices of p's anagrams in s.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc"


// Sliding Window - get the count of characters in P
// Set a counter of string P length, iterate through String s
// for each window, if the counter is 0, add the start index to result


	public List<Integer> findAnagrams(String s, String p) {
        List<Integer> result = new ArrayList<>();
        if(s==null || p == null) return result;
        
        int[] map = new int[128];
        for(int i=0;i<p.length();i++) {
            map[p.charAt(i)]++;
        }
        
        int start = 0, end = 0;
		int n = s.length(), counter = p.length();
		
        while(end < n) {
            if(map[s.charAt(end)] > 0)
                counter--;
            map[s.charAt(end)]--;
            end++;
            
            if(counter == 0) {
                result.add(start);                
            }
            
            if(end - start == p.length()) {                
                if(map[s.charAt(start)] >= 0) {
                    counter++;
                }
                map[s.charAt(start)]++;
                start++;
            }
        }
        return result;
    }