Shortest Common Supersequence

Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.  

(A string S is a subsequence of string T if deleting some number of characters from T 
(possibly 0, and the characters are chosen anywhere from T) results in the string S.)
 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.

// Find longest common subsequence using dynammic Programming
	Let X be “XMJYAUZ” and Y be “MZJAWXU”. The lcs between X and Y is “MJAU”.

// Reversely append the chars to StringBuilder, if the char is among the LCS.
	a) start from i = m - 1 and j = n - 1, check if the corresponding chars are equal, that is, s1.charAt(i) == s2.charAt(j); if yes, append either of them; if no, append the char with larger dp value.
	b) If we reach left end of s1 or s2 first, continue to append remaining chars in the other string.


	public String shortestCommonSupersequence(String s1, String s2) {
        int m = s1.length(), n = s2.length();
        int[][] dp = new int[m + 1][n + 1];
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (s1.charAt(i) == s2.charAt(j)) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                }else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        int i = 0, j = 0;
        while (i < m || j < n) {
            if (i < m ^ j < n) {
                sb.append(i < m ? s1.charAt(i++) : s2.charAt(j++));
            }else if (s1.charAt(i) == s2.charAt(j)) {
                sb.append(s1.charAt(i++));
                j++;
            }else {
                sb.append(dp[i + 1][j] > dp[i][j + 1] ? s1.charAt(i++) : s2.charAt(j++));
            }
        }
        return sb.toString();
    }
	
	
