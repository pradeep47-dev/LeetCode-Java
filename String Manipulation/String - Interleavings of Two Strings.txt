Print all interleavings of given two strings

Given two strings str1 and str2, write a function that prints all interleavings of the given two strings. 
You may assume that all characters in both strings are different

Example:

Input: str1 = "AB",  str2 = "CD"
Output:
    ABCD
    ACBD
    ACDB
    CABD
    CADB
    CDAB
	
// Recursion of string by adding characters from A and B
	
	public static void main(String[] args)
	{
		String X = "ABC";
		String Y = "ACB";
		
		Set<String> result = new HashSet<>();
		interleavings("", X, Y, result);
	}
	
	public static void interleavings(String curr, String X, String Y, Set<String> result)
	{		
		if (X.length() == 0 && Y.length() == 0)	{
			result.add(curr);
			return;
		}

		// if String X is not empty, append its first character in the result and recur for remaining substring
		
		if (X.length() > 0) {
			interleavings(curr + X.charAt(0), X.substring(1), Y, result);
		}
		
		if (Y.length() > 0) {
			interleavings(curr + Y.charAt(0), X, Y.substring(1), result);
		}
	}
	
	


Interleaving String - Formed from 2 Strings

Given s1, s2, and s3, find whether s3 is formed by the interleaving of s1 and s2.


Example 1:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true

Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false



	public boolean isInterleave(String s1, String s2, String s3) {
        int l1 = s1.length(),l2 = s2.length(), l3 = s3.length();
        
        if (l3 != l1 + l2) {
            return false;
        }
        boolean dp[] = new boolean[l2 + 1];
        for (int i = 0; i <= l1; i++) {
            for (int j = 0; j <= l2; j++) {
                if (i == 0 && j == 0) {
                    dp[j] = true;
                } else if (i == 0) {
                    dp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);
                } else if (j == 0) {
                    dp[j] = dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);
                } else {
                    dp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
                }
            }
        }
        return dp[l2];
    }

	