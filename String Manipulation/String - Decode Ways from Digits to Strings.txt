Count Possible Decodings of a given Digit Sequence

Let 1 represent ‘A’, 2 represents ‘B’, etc. Given a digit sequence, count the number of possible decodings of the given digit sequence.

Examples:

Input:  digits[] = "121"
Output: 3
// The possible decodings are "ABA", "AU", "LA"

Input: digits[] = "1234"
Output: 3
// The possible decodings are "ABCD", "LCD", "AWD"


// Dynamic Programming, keep count of (i-1 and i-2)
	
	public int NumDecodings(string s) {		
        int n = s.length();
        if(n==0) return 0;
        
        int[] count = new int[n+1];
        count[0] = 1;
        count[1] = s.charAt(0) == '0' ? 0 : 1;
        
        for(int i=2;i<=n;i++) {
            int Single = Integer.parseInt(s.substring(i-1, i));
            int Double = Integer.parseInt(s.substring(i-2, i));
            
            if(Single >= 1 && Single <= 9)
                count[i] += count[i-1];
            if(Double >= 10 && Double <= 26)
                count[i] += count[i-2];
        }
        return count[n];
    }
	
	
	static int countDecoding(char[] digits, int n) 	// Recursion
	{ 					  
		if (n == 0 || n == 1) 
		return 1; 	
		
		int count = 0; 	
		
		if (digits[n - 1] > '0') 
		count = countDecoding(digits, n - 1); 
			
		if (digits[n - 2] == '1' || (digits[n - 2] == '2' && digits[n - 1] < '7')) 
			count += countDecoding(digits, n - 2); 
	
		return count; 
	} 


// Number of ways to decode with char '*', return val % 10^9 + 7

 A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26

The encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Example 1:

Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".

Example 2:

Input: "1*"
Output: 9 + 9 = 18


class Solution {
    int M = 1000000007;
    
    public int numDecodings(String s) {
        long first = 1;
        long second = s.charAt(0) == '*' ? 9 : s.charAt(0) == '0' ? 0 : 1;
		
        for (int i = 1; i < s.length(); i++) {
            long temp = second;
            if (s.charAt(i) == '*') {
                second = 9 * second;
                if (s.charAt(i - 1) == '1')
                    second = (second + 9 * first) % M;
                else if (s.charAt(i - 1) == '2')
                    second = (second + 6 * first) % M;
                else if (s.charAt(i - 1) == '*')
                    second = (second + 15 * first) % M;
            } else {
                second = s.charAt(i) != '0' ? second : 0;
                if (s.charAt(i - 1) == '1')
                    second = (second + first) % M;
                else if (s.charAt(i - 1) == '2' && s.charAt(i) <= '6')
                    second = (second + first) % M;
                else if (s.charAt(i - 1) == '*')
                    second = (second + (s.charAt(i) <= '6' ? 2 : 1) * first) % M;
            }
            first = temp;
        }
        return (int) second;
    }
}
	

 
