Partition Labels

A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.


// get the last index of each character
// iterate through string, if current index is last char index, then add substring

    public List<int> PartitionLabels(string S) 
	{
        int n = S.length();
        int[] lastIndex = new int[26];
		
        for (int i = 0; i < n; i++)
		{
		     lastIndex[S.charAt(i) - 'a'] = i;
		}        
        
        int end = 0, start = 0;
        List<int> result = new ArrayList<>();
        
        for (int i = 0; i < n; i++) 
        {
            end = Math.max(end, lastIndex[S[i] - 'a']);
            
            if (i == end) {
                result.add(i - start + 1);
                start = i + 1;
            }
        }
        return result;
    }
	
	Time - Linear O(n)
	space - constant O(1) without considering output